
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Cedente
 * 
 */
export type Cedente = $Result.DefaultSelection<Prisma.$CedentePayload>
/**
 * Model Sacado
 * 
 */
export type Sacado = $Result.DefaultSelection<Prisma.$SacadoPayload>
/**
 * Model Fund
 * 
 */
export type Fund = $Result.DefaultSelection<Prisma.$FundPayload>
/**
 * Model Receivable
 * 
 */
export type Receivable = $Result.DefaultSelection<Prisma.$ReceivablePayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.cedente`: Exposes CRUD operations for the **Cedente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cedentes
    * const cedentes = await prisma.cedente.findMany()
    * ```
    */
  get cedente(): Prisma.CedenteDelegate<ExtArgs>;

  /**
   * `prisma.sacado`: Exposes CRUD operations for the **Sacado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sacados
    * const sacados = await prisma.sacado.findMany()
    * ```
    */
  get sacado(): Prisma.SacadoDelegate<ExtArgs>;

  /**
   * `prisma.fund`: Exposes CRUD operations for the **Fund** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funds
    * const funds = await prisma.fund.findMany()
    * ```
    */
  get fund(): Prisma.FundDelegate<ExtArgs>;

  /**
   * `prisma.receivable`: Exposes CRUD operations for the **Receivable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Receivables
    * const receivables = await prisma.receivable.findMany()
    * ```
    */
  get receivable(): Prisma.ReceivableDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Cedente: 'Cedente',
    Sacado: 'Sacado',
    Fund: 'Fund',
    Receivable: 'Receivable',
    Order: 'Order'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "cedente" | "sacado" | "fund" | "receivable" | "order"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Cedente: {
        payload: Prisma.$CedentePayload<ExtArgs>
        fields: Prisma.CedenteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CedenteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CedenteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          findFirst: {
            args: Prisma.CedenteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CedenteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          findMany: {
            args: Prisma.CedenteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>[]
          }
          create: {
            args: Prisma.CedenteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          createMany: {
            args: Prisma.CedenteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CedenteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>[]
          }
          delete: {
            args: Prisma.CedenteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          update: {
            args: Prisma.CedenteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          deleteMany: {
            args: Prisma.CedenteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CedenteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CedenteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CedentePayload>
          }
          aggregate: {
            args: Prisma.CedenteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCedente>
          }
          groupBy: {
            args: Prisma.CedenteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CedenteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CedenteCountArgs<ExtArgs>
            result: $Utils.Optional<CedenteCountAggregateOutputType> | number
          }
        }
      }
      Sacado: {
        payload: Prisma.$SacadoPayload<ExtArgs>
        fields: Prisma.SacadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SacadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SacadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          findFirst: {
            args: Prisma.SacadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SacadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          findMany: {
            args: Prisma.SacadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>[]
          }
          create: {
            args: Prisma.SacadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          createMany: {
            args: Prisma.SacadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SacadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>[]
          }
          delete: {
            args: Prisma.SacadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          update: {
            args: Prisma.SacadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          deleteMany: {
            args: Prisma.SacadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SacadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SacadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SacadoPayload>
          }
          aggregate: {
            args: Prisma.SacadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSacado>
          }
          groupBy: {
            args: Prisma.SacadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<SacadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.SacadoCountArgs<ExtArgs>
            result: $Utils.Optional<SacadoCountAggregateOutputType> | number
          }
        }
      }
      Fund: {
        payload: Prisma.$FundPayload<ExtArgs>
        fields: Prisma.FundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          findFirst: {
            args: Prisma.FundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          findMany: {
            args: Prisma.FundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>[]
          }
          create: {
            args: Prisma.FundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          createMany: {
            args: Prisma.FundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>[]
          }
          delete: {
            args: Prisma.FundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          update: {
            args: Prisma.FundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          deleteMany: {
            args: Prisma.FundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          aggregate: {
            args: Prisma.FundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFund>
          }
          groupBy: {
            args: Prisma.FundGroupByArgs<ExtArgs>
            result: $Utils.Optional<FundGroupByOutputType>[]
          }
          count: {
            args: Prisma.FundCountArgs<ExtArgs>
            result: $Utils.Optional<FundCountAggregateOutputType> | number
          }
        }
      }
      Receivable: {
        payload: Prisma.$ReceivablePayload<ExtArgs>
        fields: Prisma.ReceivableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReceivableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReceivableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          findFirst: {
            args: Prisma.ReceivableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReceivableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          findMany: {
            args: Prisma.ReceivableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>[]
          }
          create: {
            args: Prisma.ReceivableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          createMany: {
            args: Prisma.ReceivableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReceivableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>[]
          }
          delete: {
            args: Prisma.ReceivableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          update: {
            args: Prisma.ReceivableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          deleteMany: {
            args: Prisma.ReceivableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReceivableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReceivableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReceivablePayload>
          }
          aggregate: {
            args: Prisma.ReceivableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReceivable>
          }
          groupBy: {
            args: Prisma.ReceivableGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReceivableGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReceivableCountArgs<ExtArgs>
            result: $Utils.Optional<ReceivableCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
    cedentes: number
    sacados: number
    funds: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    cedentes?: boolean | UserCountOutputTypeCountCedentesArgs
    sacados?: boolean | UserCountOutputTypeCountSacadosArgs
    funds?: boolean | UserCountOutputTypeCountFundsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCedentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CedenteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSacadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SacadoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundWhereInput
  }


  /**
   * Count Type SacadoCountOutputType
   */

  export type SacadoCountOutputType = {
    receivables: number
  }

  export type SacadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivables?: boolean | SacadoCountOutputTypeCountReceivablesArgs
  }

  // Custom InputTypes
  /**
   * SacadoCountOutputType without action
   */
  export type SacadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SacadoCountOutputType
     */
    select?: SacadoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SacadoCountOutputType without action
   */
  export type SacadoCountOutputTypeCountReceivablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceivableWhereInput
  }


  /**
   * Count Type FundCountOutputType
   */

  export type FundCountOutputType = {
    receivables: number
    orders: number
  }

  export type FundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivables?: boolean | FundCountOutputTypeCountReceivablesArgs
    orders?: boolean | FundCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundCountOutputType
     */
    select?: FundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeCountReceivablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceivableWhereInput
  }

  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    status: string | null
    publicKey: string | null
    secretKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: string | null
    status: string | null
    publicKey: string | null
    secretKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    status: number
    publicKey: number
    secretKey: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    publicKey?: true
    secretKey?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    publicKey?: true
    secretKey?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    status?: true
    publicKey?: true
    secretKey?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: string
    status: string
    publicKey: string | null
    secretKey: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    publicKey?: boolean
    secretKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | User$ordersArgs<ExtArgs>
    cedentes?: boolean | User$cedentesArgs<ExtArgs>
    sacados?: boolean | User$sacadosArgs<ExtArgs>
    funds?: boolean | User$fundsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    publicKey?: boolean
    secretKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    status?: boolean
    publicKey?: boolean
    secretKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | User$ordersArgs<ExtArgs>
    cedentes?: boolean | User$cedentesArgs<ExtArgs>
    sacados?: boolean | User$sacadosArgs<ExtArgs>
    funds?: boolean | User$fundsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      cedentes: Prisma.$CedentePayload<ExtArgs>[]
      sacados: Prisma.$SacadoPayload<ExtArgs>[]
      funds: Prisma.$FundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: string
      status: string
      publicKey: string | null
      secretKey: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    cedentes<T extends User$cedentesArgs<ExtArgs> = {}>(args?: Subset<T, User$cedentesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findMany"> | Null>
    sacados<T extends User$sacadosArgs<ExtArgs> = {}>(args?: Subset<T, User$sacadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findMany"> | Null>
    funds<T extends User$fundsArgs<ExtArgs> = {}>(args?: Subset<T, User$fundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly publicKey: FieldRef<"User", 'String'>
    readonly secretKey: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.cedentes
   */
  export type User$cedentesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    where?: CedenteWhereInput
    orderBy?: CedenteOrderByWithRelationInput | CedenteOrderByWithRelationInput[]
    cursor?: CedenteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CedenteScalarFieldEnum | CedenteScalarFieldEnum[]
  }

  /**
   * User.sacados
   */
  export type User$sacadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    where?: SacadoWhereInput
    orderBy?: SacadoOrderByWithRelationInput | SacadoOrderByWithRelationInput[]
    cursor?: SacadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SacadoScalarFieldEnum | SacadoScalarFieldEnum[]
  }

  /**
   * User.funds
   */
  export type User$fundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    where?: FundWhereInput
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    cursor?: FundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Cedente
   */

  export type AggregateCedente = {
    _count: CedenteCountAggregateOutputType | null
    _min: CedenteMinAggregateOutputType | null
    _max: CedenteMaxAggregateOutputType | null
  }

  export type CedenteMinAggregateOutputType = {
    id: string | null
    name: string | null
    document: string | null
    address: string | null
    publicKey: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type CedenteMaxAggregateOutputType = {
    id: string | null
    name: string | null
    document: string | null
    address: string | null
    publicKey: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type CedenteCountAggregateOutputType = {
    id: number
    name: number
    document: number
    address: number
    publicKey: number
    status: number
    createdAt: number
    updatedAt: number
    consultorId: number
    _all: number
  }


  export type CedenteMinAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type CedenteMaxAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type CedenteCountAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
    _all?: true
  }

  export type CedenteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cedente to aggregate.
     */
    where?: CedenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cedentes to fetch.
     */
    orderBy?: CedenteOrderByWithRelationInput | CedenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CedenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cedentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cedentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cedentes
    **/
    _count?: true | CedenteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CedenteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CedenteMaxAggregateInputType
  }

  export type GetCedenteAggregateType<T extends CedenteAggregateArgs> = {
        [P in keyof T & keyof AggregateCedente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCedente[P]>
      : GetScalarType<T[P], AggregateCedente[P]>
  }




  export type CedenteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CedenteWhereInput
    orderBy?: CedenteOrderByWithAggregationInput | CedenteOrderByWithAggregationInput[]
    by: CedenteScalarFieldEnum[] | CedenteScalarFieldEnum
    having?: CedenteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CedenteCountAggregateInputType | true
    _min?: CedenteMinAggregateInputType
    _max?: CedenteMaxAggregateInputType
  }

  export type CedenteGroupByOutputType = {
    id: string
    name: string
    document: string
    address: string | null
    publicKey: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    consultorId: string
    _count: CedenteCountAggregateOutputType | null
    _min: CedenteMinAggregateOutputType | null
    _max: CedenteMaxAggregateOutputType | null
  }

  type GetCedenteGroupByPayload<T extends CedenteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CedenteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CedenteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CedenteGroupByOutputType[P]>
            : GetScalarType<T[P], CedenteGroupByOutputType[P]>
        }
      >
    >


  export type CedenteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cedente"]>

  export type CedenteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cedente"]>

  export type CedenteSelectScalar = {
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
  }

  export type CedenteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CedenteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CedentePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cedente"
    objects: {
      consultor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      document: string
      address: string | null
      publicKey: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      consultorId: string
    }, ExtArgs["result"]["cedente"]>
    composites: {}
  }

  type CedenteGetPayload<S extends boolean | null | undefined | CedenteDefaultArgs> = $Result.GetResult<Prisma.$CedentePayload, S>

  type CedenteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CedenteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CedenteCountAggregateInputType | true
    }

  export interface CedenteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cedente'], meta: { name: 'Cedente' } }
    /**
     * Find zero or one Cedente that matches the filter.
     * @param {CedenteFindUniqueArgs} args - Arguments to find a Cedente
     * @example
     * // Get one Cedente
     * const cedente = await prisma.cedente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CedenteFindUniqueArgs>(args: SelectSubset<T, CedenteFindUniqueArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cedente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CedenteFindUniqueOrThrowArgs} args - Arguments to find a Cedente
     * @example
     * // Get one Cedente
     * const cedente = await prisma.cedente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CedenteFindUniqueOrThrowArgs>(args: SelectSubset<T, CedenteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cedente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteFindFirstArgs} args - Arguments to find a Cedente
     * @example
     * // Get one Cedente
     * const cedente = await prisma.cedente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CedenteFindFirstArgs>(args?: SelectSubset<T, CedenteFindFirstArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cedente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteFindFirstOrThrowArgs} args - Arguments to find a Cedente
     * @example
     * // Get one Cedente
     * const cedente = await prisma.cedente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CedenteFindFirstOrThrowArgs>(args?: SelectSubset<T, CedenteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cedentes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cedentes
     * const cedentes = await prisma.cedente.findMany()
     * 
     * // Get first 10 Cedentes
     * const cedentes = await prisma.cedente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cedenteWithIdOnly = await prisma.cedente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CedenteFindManyArgs>(args?: SelectSubset<T, CedenteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cedente.
     * @param {CedenteCreateArgs} args - Arguments to create a Cedente.
     * @example
     * // Create one Cedente
     * const Cedente = await prisma.cedente.create({
     *   data: {
     *     // ... data to create a Cedente
     *   }
     * })
     * 
     */
    create<T extends CedenteCreateArgs>(args: SelectSubset<T, CedenteCreateArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cedentes.
     * @param {CedenteCreateManyArgs} args - Arguments to create many Cedentes.
     * @example
     * // Create many Cedentes
     * const cedente = await prisma.cedente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CedenteCreateManyArgs>(args?: SelectSubset<T, CedenteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cedentes and returns the data saved in the database.
     * @param {CedenteCreateManyAndReturnArgs} args - Arguments to create many Cedentes.
     * @example
     * // Create many Cedentes
     * const cedente = await prisma.cedente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cedentes and only return the `id`
     * const cedenteWithIdOnly = await prisma.cedente.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CedenteCreateManyAndReturnArgs>(args?: SelectSubset<T, CedenteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cedente.
     * @param {CedenteDeleteArgs} args - Arguments to delete one Cedente.
     * @example
     * // Delete one Cedente
     * const Cedente = await prisma.cedente.delete({
     *   where: {
     *     // ... filter to delete one Cedente
     *   }
     * })
     * 
     */
    delete<T extends CedenteDeleteArgs>(args: SelectSubset<T, CedenteDeleteArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cedente.
     * @param {CedenteUpdateArgs} args - Arguments to update one Cedente.
     * @example
     * // Update one Cedente
     * const cedente = await prisma.cedente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CedenteUpdateArgs>(args: SelectSubset<T, CedenteUpdateArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cedentes.
     * @param {CedenteDeleteManyArgs} args - Arguments to filter Cedentes to delete.
     * @example
     * // Delete a few Cedentes
     * const { count } = await prisma.cedente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CedenteDeleteManyArgs>(args?: SelectSubset<T, CedenteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cedentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cedentes
     * const cedente = await prisma.cedente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CedenteUpdateManyArgs>(args: SelectSubset<T, CedenteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cedente.
     * @param {CedenteUpsertArgs} args - Arguments to update or create a Cedente.
     * @example
     * // Update or create a Cedente
     * const cedente = await prisma.cedente.upsert({
     *   create: {
     *     // ... data to create a Cedente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cedente we want to update
     *   }
     * })
     */
    upsert<T extends CedenteUpsertArgs>(args: SelectSubset<T, CedenteUpsertArgs<ExtArgs>>): Prisma__CedenteClient<$Result.GetResult<Prisma.$CedentePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cedentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteCountArgs} args - Arguments to filter Cedentes to count.
     * @example
     * // Count the number of Cedentes
     * const count = await prisma.cedente.count({
     *   where: {
     *     // ... the filter for the Cedentes we want to count
     *   }
     * })
    **/
    count<T extends CedenteCountArgs>(
      args?: Subset<T, CedenteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CedenteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cedente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CedenteAggregateArgs>(args: Subset<T, CedenteAggregateArgs>): Prisma.PrismaPromise<GetCedenteAggregateType<T>>

    /**
     * Group by Cedente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CedenteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CedenteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CedenteGroupByArgs['orderBy'] }
        : { orderBy?: CedenteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CedenteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCedenteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cedente model
   */
  readonly fields: CedenteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cedente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CedenteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cedente model
   */ 
  interface CedenteFieldRefs {
    readonly id: FieldRef<"Cedente", 'String'>
    readonly name: FieldRef<"Cedente", 'String'>
    readonly document: FieldRef<"Cedente", 'String'>
    readonly address: FieldRef<"Cedente", 'String'>
    readonly publicKey: FieldRef<"Cedente", 'String'>
    readonly status: FieldRef<"Cedente", 'String'>
    readonly createdAt: FieldRef<"Cedente", 'DateTime'>
    readonly updatedAt: FieldRef<"Cedente", 'DateTime'>
    readonly consultorId: FieldRef<"Cedente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cedente findUnique
   */
  export type CedenteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter, which Cedente to fetch.
     */
    where: CedenteWhereUniqueInput
  }

  /**
   * Cedente findUniqueOrThrow
   */
  export type CedenteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter, which Cedente to fetch.
     */
    where: CedenteWhereUniqueInput
  }

  /**
   * Cedente findFirst
   */
  export type CedenteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter, which Cedente to fetch.
     */
    where?: CedenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cedentes to fetch.
     */
    orderBy?: CedenteOrderByWithRelationInput | CedenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cedentes.
     */
    cursor?: CedenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cedentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cedentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cedentes.
     */
    distinct?: CedenteScalarFieldEnum | CedenteScalarFieldEnum[]
  }

  /**
   * Cedente findFirstOrThrow
   */
  export type CedenteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter, which Cedente to fetch.
     */
    where?: CedenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cedentes to fetch.
     */
    orderBy?: CedenteOrderByWithRelationInput | CedenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cedentes.
     */
    cursor?: CedenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cedentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cedentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cedentes.
     */
    distinct?: CedenteScalarFieldEnum | CedenteScalarFieldEnum[]
  }

  /**
   * Cedente findMany
   */
  export type CedenteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter, which Cedentes to fetch.
     */
    where?: CedenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cedentes to fetch.
     */
    orderBy?: CedenteOrderByWithRelationInput | CedenteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cedentes.
     */
    cursor?: CedenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cedentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cedentes.
     */
    skip?: number
    distinct?: CedenteScalarFieldEnum | CedenteScalarFieldEnum[]
  }

  /**
   * Cedente create
   */
  export type CedenteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cedente.
     */
    data: XOR<CedenteCreateInput, CedenteUncheckedCreateInput>
  }

  /**
   * Cedente createMany
   */
  export type CedenteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cedentes.
     */
    data: CedenteCreateManyInput | CedenteCreateManyInput[]
  }

  /**
   * Cedente createManyAndReturn
   */
  export type CedenteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cedentes.
     */
    data: CedenteCreateManyInput | CedenteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cedente update
   */
  export type CedenteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cedente.
     */
    data: XOR<CedenteUpdateInput, CedenteUncheckedUpdateInput>
    /**
     * Choose, which Cedente to update.
     */
    where: CedenteWhereUniqueInput
  }

  /**
   * Cedente updateMany
   */
  export type CedenteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cedentes.
     */
    data: XOR<CedenteUpdateManyMutationInput, CedenteUncheckedUpdateManyInput>
    /**
     * Filter which Cedentes to update
     */
    where?: CedenteWhereInput
  }

  /**
   * Cedente upsert
   */
  export type CedenteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cedente to update in case it exists.
     */
    where: CedenteWhereUniqueInput
    /**
     * In case the Cedente found by the `where` argument doesn't exist, create a new Cedente with this data.
     */
    create: XOR<CedenteCreateInput, CedenteUncheckedCreateInput>
    /**
     * In case the Cedente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CedenteUpdateInput, CedenteUncheckedUpdateInput>
  }

  /**
   * Cedente delete
   */
  export type CedenteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
    /**
     * Filter which Cedente to delete.
     */
    where: CedenteWhereUniqueInput
  }

  /**
   * Cedente deleteMany
   */
  export type CedenteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cedentes to delete
     */
    where?: CedenteWhereInput
  }

  /**
   * Cedente without action
   */
  export type CedenteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cedente
     */
    select?: CedenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CedenteInclude<ExtArgs> | null
  }


  /**
   * Model Sacado
   */

  export type AggregateSacado = {
    _count: SacadoCountAggregateOutputType | null
    _min: SacadoMinAggregateOutputType | null
    _max: SacadoMaxAggregateOutputType | null
  }

  export type SacadoMinAggregateOutputType = {
    id: string | null
    name: string | null
    document: string | null
    address: string | null
    publicKey: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type SacadoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    document: string | null
    address: string | null
    publicKey: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type SacadoCountAggregateOutputType = {
    id: number
    name: number
    document: number
    address: number
    publicKey: number
    status: number
    createdAt: number
    updatedAt: number
    consultorId: number
    _all: number
  }


  export type SacadoMinAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type SacadoMaxAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type SacadoCountAggregateInputType = {
    id?: true
    name?: true
    document?: true
    address?: true
    publicKey?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
    _all?: true
  }

  export type SacadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sacado to aggregate.
     */
    where?: SacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sacados to fetch.
     */
    orderBy?: SacadoOrderByWithRelationInput | SacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sacados
    **/
    _count?: true | SacadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SacadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SacadoMaxAggregateInputType
  }

  export type GetSacadoAggregateType<T extends SacadoAggregateArgs> = {
        [P in keyof T & keyof AggregateSacado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSacado[P]>
      : GetScalarType<T[P], AggregateSacado[P]>
  }




  export type SacadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SacadoWhereInput
    orderBy?: SacadoOrderByWithAggregationInput | SacadoOrderByWithAggregationInput[]
    by: SacadoScalarFieldEnum[] | SacadoScalarFieldEnum
    having?: SacadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SacadoCountAggregateInputType | true
    _min?: SacadoMinAggregateInputType
    _max?: SacadoMaxAggregateInputType
  }

  export type SacadoGroupByOutputType = {
    id: string
    name: string
    document: string
    address: string | null
    publicKey: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    consultorId: string
    _count: SacadoCountAggregateOutputType | null
    _min: SacadoMinAggregateOutputType | null
    _max: SacadoMaxAggregateOutputType | null
  }

  type GetSacadoGroupByPayload<T extends SacadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SacadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SacadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SacadoGroupByOutputType[P]>
            : GetScalarType<T[P], SacadoGroupByOutputType[P]>
        }
      >
    >


  export type SacadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | UserDefaultArgs<ExtArgs>
    receivables?: boolean | Sacado$receivablesArgs<ExtArgs>
    _count?: boolean | SacadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sacado"]>

  export type SacadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sacado"]>

  export type SacadoSelectScalar = {
    id?: boolean
    name?: boolean
    document?: boolean
    address?: boolean
    publicKey?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
  }

  export type SacadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | UserDefaultArgs<ExtArgs>
    receivables?: boolean | Sacado$receivablesArgs<ExtArgs>
    _count?: boolean | SacadoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SacadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SacadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sacado"
    objects: {
      consultor: Prisma.$UserPayload<ExtArgs>
      receivables: Prisma.$ReceivablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      document: string
      address: string | null
      publicKey: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      consultorId: string
    }, ExtArgs["result"]["sacado"]>
    composites: {}
  }

  type SacadoGetPayload<S extends boolean | null | undefined | SacadoDefaultArgs> = $Result.GetResult<Prisma.$SacadoPayload, S>

  type SacadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SacadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SacadoCountAggregateInputType | true
    }

  export interface SacadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sacado'], meta: { name: 'Sacado' } }
    /**
     * Find zero or one Sacado that matches the filter.
     * @param {SacadoFindUniqueArgs} args - Arguments to find a Sacado
     * @example
     * // Get one Sacado
     * const sacado = await prisma.sacado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SacadoFindUniqueArgs>(args: SelectSubset<T, SacadoFindUniqueArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sacado that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SacadoFindUniqueOrThrowArgs} args - Arguments to find a Sacado
     * @example
     * // Get one Sacado
     * const sacado = await prisma.sacado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SacadoFindUniqueOrThrowArgs>(args: SelectSubset<T, SacadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sacado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoFindFirstArgs} args - Arguments to find a Sacado
     * @example
     * // Get one Sacado
     * const sacado = await prisma.sacado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SacadoFindFirstArgs>(args?: SelectSubset<T, SacadoFindFirstArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sacado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoFindFirstOrThrowArgs} args - Arguments to find a Sacado
     * @example
     * // Get one Sacado
     * const sacado = await prisma.sacado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SacadoFindFirstOrThrowArgs>(args?: SelectSubset<T, SacadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sacados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sacados
     * const sacados = await prisma.sacado.findMany()
     * 
     * // Get first 10 Sacados
     * const sacados = await prisma.sacado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sacadoWithIdOnly = await prisma.sacado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SacadoFindManyArgs>(args?: SelectSubset<T, SacadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sacado.
     * @param {SacadoCreateArgs} args - Arguments to create a Sacado.
     * @example
     * // Create one Sacado
     * const Sacado = await prisma.sacado.create({
     *   data: {
     *     // ... data to create a Sacado
     *   }
     * })
     * 
     */
    create<T extends SacadoCreateArgs>(args: SelectSubset<T, SacadoCreateArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sacados.
     * @param {SacadoCreateManyArgs} args - Arguments to create many Sacados.
     * @example
     * // Create many Sacados
     * const sacado = await prisma.sacado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SacadoCreateManyArgs>(args?: SelectSubset<T, SacadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sacados and returns the data saved in the database.
     * @param {SacadoCreateManyAndReturnArgs} args - Arguments to create many Sacados.
     * @example
     * // Create many Sacados
     * const sacado = await prisma.sacado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sacados and only return the `id`
     * const sacadoWithIdOnly = await prisma.sacado.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SacadoCreateManyAndReturnArgs>(args?: SelectSubset<T, SacadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sacado.
     * @param {SacadoDeleteArgs} args - Arguments to delete one Sacado.
     * @example
     * // Delete one Sacado
     * const Sacado = await prisma.sacado.delete({
     *   where: {
     *     // ... filter to delete one Sacado
     *   }
     * })
     * 
     */
    delete<T extends SacadoDeleteArgs>(args: SelectSubset<T, SacadoDeleteArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sacado.
     * @param {SacadoUpdateArgs} args - Arguments to update one Sacado.
     * @example
     * // Update one Sacado
     * const sacado = await prisma.sacado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SacadoUpdateArgs>(args: SelectSubset<T, SacadoUpdateArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sacados.
     * @param {SacadoDeleteManyArgs} args - Arguments to filter Sacados to delete.
     * @example
     * // Delete a few Sacados
     * const { count } = await prisma.sacado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SacadoDeleteManyArgs>(args?: SelectSubset<T, SacadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sacados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sacados
     * const sacado = await prisma.sacado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SacadoUpdateManyArgs>(args: SelectSubset<T, SacadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sacado.
     * @param {SacadoUpsertArgs} args - Arguments to update or create a Sacado.
     * @example
     * // Update or create a Sacado
     * const sacado = await prisma.sacado.upsert({
     *   create: {
     *     // ... data to create a Sacado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sacado we want to update
     *   }
     * })
     */
    upsert<T extends SacadoUpsertArgs>(args: SelectSubset<T, SacadoUpsertArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sacados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoCountArgs} args - Arguments to filter Sacados to count.
     * @example
     * // Count the number of Sacados
     * const count = await prisma.sacado.count({
     *   where: {
     *     // ... the filter for the Sacados we want to count
     *   }
     * })
    **/
    count<T extends SacadoCountArgs>(
      args?: Subset<T, SacadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SacadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sacado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SacadoAggregateArgs>(args: Subset<T, SacadoAggregateArgs>): Prisma.PrismaPromise<GetSacadoAggregateType<T>>

    /**
     * Group by Sacado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SacadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SacadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SacadoGroupByArgs['orderBy'] }
        : { orderBy?: SacadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SacadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSacadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sacado model
   */
  readonly fields: SacadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sacado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SacadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receivables<T extends Sacado$receivablesArgs<ExtArgs> = {}>(args?: Subset<T, Sacado$receivablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sacado model
   */ 
  interface SacadoFieldRefs {
    readonly id: FieldRef<"Sacado", 'String'>
    readonly name: FieldRef<"Sacado", 'String'>
    readonly document: FieldRef<"Sacado", 'String'>
    readonly address: FieldRef<"Sacado", 'String'>
    readonly publicKey: FieldRef<"Sacado", 'String'>
    readonly status: FieldRef<"Sacado", 'String'>
    readonly createdAt: FieldRef<"Sacado", 'DateTime'>
    readonly updatedAt: FieldRef<"Sacado", 'DateTime'>
    readonly consultorId: FieldRef<"Sacado", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Sacado findUnique
   */
  export type SacadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter, which Sacado to fetch.
     */
    where: SacadoWhereUniqueInput
  }

  /**
   * Sacado findUniqueOrThrow
   */
  export type SacadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter, which Sacado to fetch.
     */
    where: SacadoWhereUniqueInput
  }

  /**
   * Sacado findFirst
   */
  export type SacadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter, which Sacado to fetch.
     */
    where?: SacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sacados to fetch.
     */
    orderBy?: SacadoOrderByWithRelationInput | SacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sacados.
     */
    cursor?: SacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sacados.
     */
    distinct?: SacadoScalarFieldEnum | SacadoScalarFieldEnum[]
  }

  /**
   * Sacado findFirstOrThrow
   */
  export type SacadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter, which Sacado to fetch.
     */
    where?: SacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sacados to fetch.
     */
    orderBy?: SacadoOrderByWithRelationInput | SacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sacados.
     */
    cursor?: SacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sacados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sacados.
     */
    distinct?: SacadoScalarFieldEnum | SacadoScalarFieldEnum[]
  }

  /**
   * Sacado findMany
   */
  export type SacadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter, which Sacados to fetch.
     */
    where?: SacadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sacados to fetch.
     */
    orderBy?: SacadoOrderByWithRelationInput | SacadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sacados.
     */
    cursor?: SacadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sacados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sacados.
     */
    skip?: number
    distinct?: SacadoScalarFieldEnum | SacadoScalarFieldEnum[]
  }

  /**
   * Sacado create
   */
  export type SacadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Sacado.
     */
    data: XOR<SacadoCreateInput, SacadoUncheckedCreateInput>
  }

  /**
   * Sacado createMany
   */
  export type SacadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sacados.
     */
    data: SacadoCreateManyInput | SacadoCreateManyInput[]
  }

  /**
   * Sacado createManyAndReturn
   */
  export type SacadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sacados.
     */
    data: SacadoCreateManyInput | SacadoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sacado update
   */
  export type SacadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Sacado.
     */
    data: XOR<SacadoUpdateInput, SacadoUncheckedUpdateInput>
    /**
     * Choose, which Sacado to update.
     */
    where: SacadoWhereUniqueInput
  }

  /**
   * Sacado updateMany
   */
  export type SacadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sacados.
     */
    data: XOR<SacadoUpdateManyMutationInput, SacadoUncheckedUpdateManyInput>
    /**
     * Filter which Sacados to update
     */
    where?: SacadoWhereInput
  }

  /**
   * Sacado upsert
   */
  export type SacadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Sacado to update in case it exists.
     */
    where: SacadoWhereUniqueInput
    /**
     * In case the Sacado found by the `where` argument doesn't exist, create a new Sacado with this data.
     */
    create: XOR<SacadoCreateInput, SacadoUncheckedCreateInput>
    /**
     * In case the Sacado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SacadoUpdateInput, SacadoUncheckedUpdateInput>
  }

  /**
   * Sacado delete
   */
  export type SacadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
    /**
     * Filter which Sacado to delete.
     */
    where: SacadoWhereUniqueInput
  }

  /**
   * Sacado deleteMany
   */
  export type SacadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sacados to delete
     */
    where?: SacadoWhereInput
  }

  /**
   * Sacado.receivables
   */
  export type Sacado$receivablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    where?: ReceivableWhereInput
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    cursor?: ReceivableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceivableScalarFieldEnum | ReceivableScalarFieldEnum[]
  }

  /**
   * Sacado without action
   */
  export type SacadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sacado
     */
    select?: SacadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SacadoInclude<ExtArgs> | null
  }


  /**
   * Model Fund
   */

  export type AggregateFund = {
    _count: FundCountAggregateOutputType | null
    _avg: FundAvgAggregateOutputType | null
    _sum: FundSumAggregateOutputType | null
    _min: FundMinAggregateOutputType | null
    _max: FundMaxAggregateOutputType | null
  }

  export type FundAvgAggregateOutputType = {
    maxSupply: number | null
    totalIssued: number | null
    price: number | null
    targetAmount: number | null
  }

  export type FundSumAggregateOutputType = {
    maxSupply: number | null
    totalIssued: number | null
    price: number | null
    targetAmount: number | null
  }

  export type FundMinAggregateOutputType = {
    id: string | null
    name: string | null
    symbol: string | null
    contractAddress: string | null
    tokenContractId: string | null
    vaultContractId: string | null
    adminSecretKey: string | null
    maxSupply: number | null
    totalIssued: number | null
    price: number | null
    status: string | null
    targetAmount: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type FundMaxAggregateOutputType = {
    id: string | null
    name: string | null
    symbol: string | null
    contractAddress: string | null
    tokenContractId: string | null
    vaultContractId: string | null
    adminSecretKey: string | null
    maxSupply: number | null
    totalIssued: number | null
    price: number | null
    status: string | null
    targetAmount: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    consultorId: string | null
  }

  export type FundCountAggregateOutputType = {
    id: number
    name: number
    symbol: number
    contractAddress: number
    tokenContractId: number
    vaultContractId: number
    adminSecretKey: number
    maxSupply: number
    totalIssued: number
    price: number
    status: number
    targetAmount: number
    description: number
    createdAt: number
    updatedAt: number
    consultorId: number
    _all: number
  }


  export type FundAvgAggregateInputType = {
    maxSupply?: true
    totalIssued?: true
    price?: true
    targetAmount?: true
  }

  export type FundSumAggregateInputType = {
    maxSupply?: true
    totalIssued?: true
    price?: true
    targetAmount?: true
  }

  export type FundMinAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    contractAddress?: true
    tokenContractId?: true
    vaultContractId?: true
    adminSecretKey?: true
    maxSupply?: true
    totalIssued?: true
    price?: true
    status?: true
    targetAmount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type FundMaxAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    contractAddress?: true
    tokenContractId?: true
    vaultContractId?: true
    adminSecretKey?: true
    maxSupply?: true
    totalIssued?: true
    price?: true
    status?: true
    targetAmount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
  }

  export type FundCountAggregateInputType = {
    id?: true
    name?: true
    symbol?: true
    contractAddress?: true
    tokenContractId?: true
    vaultContractId?: true
    adminSecretKey?: true
    maxSupply?: true
    totalIssued?: true
    price?: true
    status?: true
    targetAmount?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    consultorId?: true
    _all?: true
  }

  export type FundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fund to aggregate.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funds
    **/
    _count?: true | FundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FundMaxAggregateInputType
  }

  export type GetFundAggregateType<T extends FundAggregateArgs> = {
        [P in keyof T & keyof AggregateFund]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFund[P]>
      : GetScalarType<T[P], AggregateFund[P]>
  }




  export type FundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundWhereInput
    orderBy?: FundOrderByWithAggregationInput | FundOrderByWithAggregationInput[]
    by: FundScalarFieldEnum[] | FundScalarFieldEnum
    having?: FundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FundCountAggregateInputType | true
    _avg?: FundAvgAggregateInputType
    _sum?: FundSumAggregateInputType
    _min?: FundMinAggregateInputType
    _max?: FundMaxAggregateInputType
  }

  export type FundGroupByOutputType = {
    id: string
    name: string
    symbol: string
    contractAddress: string | null
    tokenContractId: string | null
    vaultContractId: string | null
    adminSecretKey: string | null
    maxSupply: number
    totalIssued: number
    price: number
    status: string
    targetAmount: number | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    consultorId: string | null
    _count: FundCountAggregateOutputType | null
    _avg: FundAvgAggregateOutputType | null
    _sum: FundSumAggregateOutputType | null
    _min: FundMinAggregateOutputType | null
    _max: FundMaxAggregateOutputType | null
  }

  type GetFundGroupByPayload<T extends FundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FundGroupByOutputType[P]>
            : GetScalarType<T[P], FundGroupByOutputType[P]>
        }
      >
    >


  export type FundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbol?: boolean
    contractAddress?: boolean
    tokenContractId?: boolean
    vaultContractId?: boolean
    adminSecretKey?: boolean
    maxSupply?: boolean
    totalIssued?: boolean
    price?: boolean
    status?: boolean
    targetAmount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | Fund$consultorArgs<ExtArgs>
    receivables?: boolean | Fund$receivablesArgs<ExtArgs>
    orders?: boolean | Fund$ordersArgs<ExtArgs>
    _count?: boolean | FundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fund"]>

  export type FundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbol?: boolean
    contractAddress?: boolean
    tokenContractId?: boolean
    vaultContractId?: boolean
    adminSecretKey?: boolean
    maxSupply?: boolean
    totalIssued?: boolean
    price?: boolean
    status?: boolean
    targetAmount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
    consultor?: boolean | Fund$consultorArgs<ExtArgs>
  }, ExtArgs["result"]["fund"]>

  export type FundSelectScalar = {
    id?: boolean
    name?: boolean
    symbol?: boolean
    contractAddress?: boolean
    tokenContractId?: boolean
    vaultContractId?: boolean
    adminSecretKey?: boolean
    maxSupply?: boolean
    totalIssued?: boolean
    price?: boolean
    status?: boolean
    targetAmount?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    consultorId?: boolean
  }

  export type FundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | Fund$consultorArgs<ExtArgs>
    receivables?: boolean | Fund$receivablesArgs<ExtArgs>
    orders?: boolean | Fund$ordersArgs<ExtArgs>
    _count?: boolean | FundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultor?: boolean | Fund$consultorArgs<ExtArgs>
  }

  export type $FundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fund"
    objects: {
      consultor: Prisma.$UserPayload<ExtArgs> | null
      receivables: Prisma.$ReceivablePayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      symbol: string
      contractAddress: string | null
      tokenContractId: string | null
      vaultContractId: string | null
      adminSecretKey: string | null
      maxSupply: number
      totalIssued: number
      price: number
      status: string
      targetAmount: number | null
      description: string | null
      createdAt: Date
      updatedAt: Date
      consultorId: string | null
    }, ExtArgs["result"]["fund"]>
    composites: {}
  }

  type FundGetPayload<S extends boolean | null | undefined | FundDefaultArgs> = $Result.GetResult<Prisma.$FundPayload, S>

  type FundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FundFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FundCountAggregateInputType | true
    }

  export interface FundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fund'], meta: { name: 'Fund' } }
    /**
     * Find zero or one Fund that matches the filter.
     * @param {FundFindUniqueArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FundFindUniqueArgs>(args: SelectSubset<T, FundFindUniqueArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fund that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FundFindUniqueOrThrowArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FundFindUniqueOrThrowArgs>(args: SelectSubset<T, FundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fund that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindFirstArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FundFindFirstArgs>(args?: SelectSubset<T, FundFindFirstArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fund that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindFirstOrThrowArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FundFindFirstOrThrowArgs>(args?: SelectSubset<T, FundFindFirstOrThrowArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Funds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funds
     * const funds = await prisma.fund.findMany()
     * 
     * // Get first 10 Funds
     * const funds = await prisma.fund.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fundWithIdOnly = await prisma.fund.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FundFindManyArgs>(args?: SelectSubset<T, FundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fund.
     * @param {FundCreateArgs} args - Arguments to create a Fund.
     * @example
     * // Create one Fund
     * const Fund = await prisma.fund.create({
     *   data: {
     *     // ... data to create a Fund
     *   }
     * })
     * 
     */
    create<T extends FundCreateArgs>(args: SelectSubset<T, FundCreateArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Funds.
     * @param {FundCreateManyArgs} args - Arguments to create many Funds.
     * @example
     * // Create many Funds
     * const fund = await prisma.fund.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FundCreateManyArgs>(args?: SelectSubset<T, FundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Funds and returns the data saved in the database.
     * @param {FundCreateManyAndReturnArgs} args - Arguments to create many Funds.
     * @example
     * // Create many Funds
     * const fund = await prisma.fund.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Funds and only return the `id`
     * const fundWithIdOnly = await prisma.fund.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FundCreateManyAndReturnArgs>(args?: SelectSubset<T, FundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fund.
     * @param {FundDeleteArgs} args - Arguments to delete one Fund.
     * @example
     * // Delete one Fund
     * const Fund = await prisma.fund.delete({
     *   where: {
     *     // ... filter to delete one Fund
     *   }
     * })
     * 
     */
    delete<T extends FundDeleteArgs>(args: SelectSubset<T, FundDeleteArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fund.
     * @param {FundUpdateArgs} args - Arguments to update one Fund.
     * @example
     * // Update one Fund
     * const fund = await prisma.fund.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FundUpdateArgs>(args: SelectSubset<T, FundUpdateArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Funds.
     * @param {FundDeleteManyArgs} args - Arguments to filter Funds to delete.
     * @example
     * // Delete a few Funds
     * const { count } = await prisma.fund.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FundDeleteManyArgs>(args?: SelectSubset<T, FundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funds
     * const fund = await prisma.fund.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FundUpdateManyArgs>(args: SelectSubset<T, FundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fund.
     * @param {FundUpsertArgs} args - Arguments to update or create a Fund.
     * @example
     * // Update or create a Fund
     * const fund = await prisma.fund.upsert({
     *   create: {
     *     // ... data to create a Fund
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fund we want to update
     *   }
     * })
     */
    upsert<T extends FundUpsertArgs>(args: SelectSubset<T, FundUpsertArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Funds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundCountArgs} args - Arguments to filter Funds to count.
     * @example
     * // Count the number of Funds
     * const count = await prisma.fund.count({
     *   where: {
     *     // ... the filter for the Funds we want to count
     *   }
     * })
    **/
    count<T extends FundCountArgs>(
      args?: Subset<T, FundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fund.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FundAggregateArgs>(args: Subset<T, FundAggregateArgs>): Prisma.PrismaPromise<GetFundAggregateType<T>>

    /**
     * Group by Fund.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FundGroupByArgs['orderBy'] }
        : { orderBy?: FundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fund model
   */
  readonly fields: FundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fund.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultor<T extends Fund$consultorArgs<ExtArgs> = {}>(args?: Subset<T, Fund$consultorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    receivables<T extends Fund$receivablesArgs<ExtArgs> = {}>(args?: Subset<T, Fund$receivablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends Fund$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Fund$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fund model
   */ 
  interface FundFieldRefs {
    readonly id: FieldRef<"Fund", 'String'>
    readonly name: FieldRef<"Fund", 'String'>
    readonly symbol: FieldRef<"Fund", 'String'>
    readonly contractAddress: FieldRef<"Fund", 'String'>
    readonly tokenContractId: FieldRef<"Fund", 'String'>
    readonly vaultContractId: FieldRef<"Fund", 'String'>
    readonly adminSecretKey: FieldRef<"Fund", 'String'>
    readonly maxSupply: FieldRef<"Fund", 'Int'>
    readonly totalIssued: FieldRef<"Fund", 'Int'>
    readonly price: FieldRef<"Fund", 'Float'>
    readonly status: FieldRef<"Fund", 'String'>
    readonly targetAmount: FieldRef<"Fund", 'Float'>
    readonly description: FieldRef<"Fund", 'String'>
    readonly createdAt: FieldRef<"Fund", 'DateTime'>
    readonly updatedAt: FieldRef<"Fund", 'DateTime'>
    readonly consultorId: FieldRef<"Fund", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fund findUnique
   */
  export type FundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund findUniqueOrThrow
   */
  export type FundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund findFirst
   */
  export type FundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funds.
     */
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund findFirstOrThrow
   */
  export type FundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funds.
     */
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund findMany
   */
  export type FundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Funds to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund create
   */
  export type FundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The data needed to create a Fund.
     */
    data: XOR<FundCreateInput, FundUncheckedCreateInput>
  }

  /**
   * Fund createMany
   */
  export type FundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funds.
     */
    data: FundCreateManyInput | FundCreateManyInput[]
  }

  /**
   * Fund createManyAndReturn
   */
  export type FundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Funds.
     */
    data: FundCreateManyInput | FundCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Fund update
   */
  export type FundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The data needed to update a Fund.
     */
    data: XOR<FundUpdateInput, FundUncheckedUpdateInput>
    /**
     * Choose, which Fund to update.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund updateMany
   */
  export type FundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funds.
     */
    data: XOR<FundUpdateManyMutationInput, FundUncheckedUpdateManyInput>
    /**
     * Filter which Funds to update
     */
    where?: FundWhereInput
  }

  /**
   * Fund upsert
   */
  export type FundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The filter to search for the Fund to update in case it exists.
     */
    where: FundWhereUniqueInput
    /**
     * In case the Fund found by the `where` argument doesn't exist, create a new Fund with this data.
     */
    create: XOR<FundCreateInput, FundUncheckedCreateInput>
    /**
     * In case the Fund was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FundUpdateInput, FundUncheckedUpdateInput>
  }

  /**
   * Fund delete
   */
  export type FundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter which Fund to delete.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund deleteMany
   */
  export type FundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funds to delete
     */
    where?: FundWhereInput
  }

  /**
   * Fund.consultor
   */
  export type Fund$consultorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Fund.receivables
   */
  export type Fund$receivablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    where?: ReceivableWhereInput
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    cursor?: ReceivableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReceivableScalarFieldEnum | ReceivableScalarFieldEnum[]
  }

  /**
   * Fund.orders
   */
  export type Fund$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Fund without action
   */
  export type FundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
  }


  /**
   * Model Receivable
   */

  export type AggregateReceivable = {
    _count: ReceivableCountAggregateOutputType | null
    _avg: ReceivableAvgAggregateOutputType | null
    _sum: ReceivableSumAggregateOutputType | null
    _min: ReceivableMinAggregateOutputType | null
    _max: ReceivableMaxAggregateOutputType | null
  }

  export type ReceivableAvgAggregateOutputType = {
    faceValue: number | null
    paidValue: number | null
  }

  export type ReceivableSumAggregateOutputType = {
    faceValue: number | null
    paidValue: number | null
  }

  export type ReceivableMinAggregateOutputType = {
    id: string | null
    faceValue: number | null
    dueDate: Date | null
    status: string | null
    paidValue: number | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    fundId: string | null
    sacadoId: string | null
  }

  export type ReceivableMaxAggregateOutputType = {
    id: string | null
    faceValue: number | null
    dueDate: Date | null
    status: string | null
    paidValue: number | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    fundId: string | null
    sacadoId: string | null
  }

  export type ReceivableCountAggregateOutputType = {
    id: number
    faceValue: number
    dueDate: number
    status: number
    paidValue: number
    paidAt: number
    createdAt: number
    updatedAt: number
    fundId: number
    sacadoId: number
    _all: number
  }


  export type ReceivableAvgAggregateInputType = {
    faceValue?: true
    paidValue?: true
  }

  export type ReceivableSumAggregateInputType = {
    faceValue?: true
    paidValue?: true
  }

  export type ReceivableMinAggregateInputType = {
    id?: true
    faceValue?: true
    dueDate?: true
    status?: true
    paidValue?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    fundId?: true
    sacadoId?: true
  }

  export type ReceivableMaxAggregateInputType = {
    id?: true
    faceValue?: true
    dueDate?: true
    status?: true
    paidValue?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    fundId?: true
    sacadoId?: true
  }

  export type ReceivableCountAggregateInputType = {
    id?: true
    faceValue?: true
    dueDate?: true
    status?: true
    paidValue?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    fundId?: true
    sacadoId?: true
    _all?: true
  }

  export type ReceivableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receivable to aggregate.
     */
    where?: ReceivableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receivables to fetch.
     */
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReceivableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receivables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receivables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Receivables
    **/
    _count?: true | ReceivableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReceivableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReceivableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReceivableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReceivableMaxAggregateInputType
  }

  export type GetReceivableAggregateType<T extends ReceivableAggregateArgs> = {
        [P in keyof T & keyof AggregateReceivable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReceivable[P]>
      : GetScalarType<T[P], AggregateReceivable[P]>
  }




  export type ReceivableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReceivableWhereInput
    orderBy?: ReceivableOrderByWithAggregationInput | ReceivableOrderByWithAggregationInput[]
    by: ReceivableScalarFieldEnum[] | ReceivableScalarFieldEnum
    having?: ReceivableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReceivableCountAggregateInputType | true
    _avg?: ReceivableAvgAggregateInputType
    _sum?: ReceivableSumAggregateInputType
    _min?: ReceivableMinAggregateInputType
    _max?: ReceivableMaxAggregateInputType
  }

  export type ReceivableGroupByOutputType = {
    id: string
    faceValue: number
    dueDate: Date
    status: string
    paidValue: number | null
    paidAt: Date | null
    createdAt: Date
    updatedAt: Date
    fundId: string
    sacadoId: string
    _count: ReceivableCountAggregateOutputType | null
    _avg: ReceivableAvgAggregateOutputType | null
    _sum: ReceivableSumAggregateOutputType | null
    _min: ReceivableMinAggregateOutputType | null
    _max: ReceivableMaxAggregateOutputType | null
  }

  type GetReceivableGroupByPayload<T extends ReceivableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReceivableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReceivableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReceivableGroupByOutputType[P]>
            : GetScalarType<T[P], ReceivableGroupByOutputType[P]>
        }
      >
    >


  export type ReceivableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faceValue?: boolean
    dueDate?: boolean
    status?: boolean
    paidValue?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fundId?: boolean
    sacadoId?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
    sacado?: boolean | SacadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receivable"]>

  export type ReceivableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faceValue?: boolean
    dueDate?: boolean
    status?: boolean
    paidValue?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fundId?: boolean
    sacadoId?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
    sacado?: boolean | SacadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["receivable"]>

  export type ReceivableSelectScalar = {
    id?: boolean
    faceValue?: boolean
    dueDate?: boolean
    status?: boolean
    paidValue?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fundId?: boolean
    sacadoId?: boolean
  }

  export type ReceivableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
    sacado?: boolean | SacadoDefaultArgs<ExtArgs>
  }
  export type ReceivableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
    sacado?: boolean | SacadoDefaultArgs<ExtArgs>
  }

  export type $ReceivablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Receivable"
    objects: {
      fund: Prisma.$FundPayload<ExtArgs>
      sacado: Prisma.$SacadoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      faceValue: number
      dueDate: Date
      status: string
      paidValue: number | null
      paidAt: Date | null
      createdAt: Date
      updatedAt: Date
      fundId: string
      sacadoId: string
    }, ExtArgs["result"]["receivable"]>
    composites: {}
  }

  type ReceivableGetPayload<S extends boolean | null | undefined | ReceivableDefaultArgs> = $Result.GetResult<Prisma.$ReceivablePayload, S>

  type ReceivableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReceivableFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReceivableCountAggregateInputType | true
    }

  export interface ReceivableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Receivable'], meta: { name: 'Receivable' } }
    /**
     * Find zero or one Receivable that matches the filter.
     * @param {ReceivableFindUniqueArgs} args - Arguments to find a Receivable
     * @example
     * // Get one Receivable
     * const receivable = await prisma.receivable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReceivableFindUniqueArgs>(args: SelectSubset<T, ReceivableFindUniqueArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Receivable that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReceivableFindUniqueOrThrowArgs} args - Arguments to find a Receivable
     * @example
     * // Get one Receivable
     * const receivable = await prisma.receivable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReceivableFindUniqueOrThrowArgs>(args: SelectSubset<T, ReceivableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Receivable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableFindFirstArgs} args - Arguments to find a Receivable
     * @example
     * // Get one Receivable
     * const receivable = await prisma.receivable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReceivableFindFirstArgs>(args?: SelectSubset<T, ReceivableFindFirstArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Receivable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableFindFirstOrThrowArgs} args - Arguments to find a Receivable
     * @example
     * // Get one Receivable
     * const receivable = await prisma.receivable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReceivableFindFirstOrThrowArgs>(args?: SelectSubset<T, ReceivableFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Receivables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Receivables
     * const receivables = await prisma.receivable.findMany()
     * 
     * // Get first 10 Receivables
     * const receivables = await prisma.receivable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const receivableWithIdOnly = await prisma.receivable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReceivableFindManyArgs>(args?: SelectSubset<T, ReceivableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Receivable.
     * @param {ReceivableCreateArgs} args - Arguments to create a Receivable.
     * @example
     * // Create one Receivable
     * const Receivable = await prisma.receivable.create({
     *   data: {
     *     // ... data to create a Receivable
     *   }
     * })
     * 
     */
    create<T extends ReceivableCreateArgs>(args: SelectSubset<T, ReceivableCreateArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Receivables.
     * @param {ReceivableCreateManyArgs} args - Arguments to create many Receivables.
     * @example
     * // Create many Receivables
     * const receivable = await prisma.receivable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReceivableCreateManyArgs>(args?: SelectSubset<T, ReceivableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Receivables and returns the data saved in the database.
     * @param {ReceivableCreateManyAndReturnArgs} args - Arguments to create many Receivables.
     * @example
     * // Create many Receivables
     * const receivable = await prisma.receivable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Receivables and only return the `id`
     * const receivableWithIdOnly = await prisma.receivable.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReceivableCreateManyAndReturnArgs>(args?: SelectSubset<T, ReceivableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Receivable.
     * @param {ReceivableDeleteArgs} args - Arguments to delete one Receivable.
     * @example
     * // Delete one Receivable
     * const Receivable = await prisma.receivable.delete({
     *   where: {
     *     // ... filter to delete one Receivable
     *   }
     * })
     * 
     */
    delete<T extends ReceivableDeleteArgs>(args: SelectSubset<T, ReceivableDeleteArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Receivable.
     * @param {ReceivableUpdateArgs} args - Arguments to update one Receivable.
     * @example
     * // Update one Receivable
     * const receivable = await prisma.receivable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReceivableUpdateArgs>(args: SelectSubset<T, ReceivableUpdateArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Receivables.
     * @param {ReceivableDeleteManyArgs} args - Arguments to filter Receivables to delete.
     * @example
     * // Delete a few Receivables
     * const { count } = await prisma.receivable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReceivableDeleteManyArgs>(args?: SelectSubset<T, ReceivableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Receivables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Receivables
     * const receivable = await prisma.receivable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReceivableUpdateManyArgs>(args: SelectSubset<T, ReceivableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Receivable.
     * @param {ReceivableUpsertArgs} args - Arguments to update or create a Receivable.
     * @example
     * // Update or create a Receivable
     * const receivable = await prisma.receivable.upsert({
     *   create: {
     *     // ... data to create a Receivable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Receivable we want to update
     *   }
     * })
     */
    upsert<T extends ReceivableUpsertArgs>(args: SelectSubset<T, ReceivableUpsertArgs<ExtArgs>>): Prisma__ReceivableClient<$Result.GetResult<Prisma.$ReceivablePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Receivables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableCountArgs} args - Arguments to filter Receivables to count.
     * @example
     * // Count the number of Receivables
     * const count = await prisma.receivable.count({
     *   where: {
     *     // ... the filter for the Receivables we want to count
     *   }
     * })
    **/
    count<T extends ReceivableCountArgs>(
      args?: Subset<T, ReceivableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReceivableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Receivable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReceivableAggregateArgs>(args: Subset<T, ReceivableAggregateArgs>): Prisma.PrismaPromise<GetReceivableAggregateType<T>>

    /**
     * Group by Receivable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReceivableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReceivableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReceivableGroupByArgs['orderBy'] }
        : { orderBy?: ReceivableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReceivableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReceivableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Receivable model
   */
  readonly fields: ReceivableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Receivable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReceivableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fund<T extends FundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FundDefaultArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sacado<T extends SacadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SacadoDefaultArgs<ExtArgs>>): Prisma__SacadoClient<$Result.GetResult<Prisma.$SacadoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Receivable model
   */ 
  interface ReceivableFieldRefs {
    readonly id: FieldRef<"Receivable", 'String'>
    readonly faceValue: FieldRef<"Receivable", 'Float'>
    readonly dueDate: FieldRef<"Receivable", 'DateTime'>
    readonly status: FieldRef<"Receivable", 'String'>
    readonly paidValue: FieldRef<"Receivable", 'Float'>
    readonly paidAt: FieldRef<"Receivable", 'DateTime'>
    readonly createdAt: FieldRef<"Receivable", 'DateTime'>
    readonly updatedAt: FieldRef<"Receivable", 'DateTime'>
    readonly fundId: FieldRef<"Receivable", 'String'>
    readonly sacadoId: FieldRef<"Receivable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Receivable findUnique
   */
  export type ReceivableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter, which Receivable to fetch.
     */
    where: ReceivableWhereUniqueInput
  }

  /**
   * Receivable findUniqueOrThrow
   */
  export type ReceivableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter, which Receivable to fetch.
     */
    where: ReceivableWhereUniqueInput
  }

  /**
   * Receivable findFirst
   */
  export type ReceivableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter, which Receivable to fetch.
     */
    where?: ReceivableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receivables to fetch.
     */
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receivables.
     */
    cursor?: ReceivableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receivables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receivables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receivables.
     */
    distinct?: ReceivableScalarFieldEnum | ReceivableScalarFieldEnum[]
  }

  /**
   * Receivable findFirstOrThrow
   */
  export type ReceivableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter, which Receivable to fetch.
     */
    where?: ReceivableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receivables to fetch.
     */
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Receivables.
     */
    cursor?: ReceivableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receivables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receivables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Receivables.
     */
    distinct?: ReceivableScalarFieldEnum | ReceivableScalarFieldEnum[]
  }

  /**
   * Receivable findMany
   */
  export type ReceivableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter, which Receivables to fetch.
     */
    where?: ReceivableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Receivables to fetch.
     */
    orderBy?: ReceivableOrderByWithRelationInput | ReceivableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Receivables.
     */
    cursor?: ReceivableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Receivables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Receivables.
     */
    skip?: number
    distinct?: ReceivableScalarFieldEnum | ReceivableScalarFieldEnum[]
  }

  /**
   * Receivable create
   */
  export type ReceivableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * The data needed to create a Receivable.
     */
    data: XOR<ReceivableCreateInput, ReceivableUncheckedCreateInput>
  }

  /**
   * Receivable createMany
   */
  export type ReceivableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Receivables.
     */
    data: ReceivableCreateManyInput | ReceivableCreateManyInput[]
  }

  /**
   * Receivable createManyAndReturn
   */
  export type ReceivableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Receivables.
     */
    data: ReceivableCreateManyInput | ReceivableCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Receivable update
   */
  export type ReceivableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * The data needed to update a Receivable.
     */
    data: XOR<ReceivableUpdateInput, ReceivableUncheckedUpdateInput>
    /**
     * Choose, which Receivable to update.
     */
    where: ReceivableWhereUniqueInput
  }

  /**
   * Receivable updateMany
   */
  export type ReceivableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Receivables.
     */
    data: XOR<ReceivableUpdateManyMutationInput, ReceivableUncheckedUpdateManyInput>
    /**
     * Filter which Receivables to update
     */
    where?: ReceivableWhereInput
  }

  /**
   * Receivable upsert
   */
  export type ReceivableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * The filter to search for the Receivable to update in case it exists.
     */
    where: ReceivableWhereUniqueInput
    /**
     * In case the Receivable found by the `where` argument doesn't exist, create a new Receivable with this data.
     */
    create: XOR<ReceivableCreateInput, ReceivableUncheckedCreateInput>
    /**
     * In case the Receivable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReceivableUpdateInput, ReceivableUncheckedUpdateInput>
  }

  /**
   * Receivable delete
   */
  export type ReceivableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
    /**
     * Filter which Receivable to delete.
     */
    where: ReceivableWhereUniqueInput
  }

  /**
   * Receivable deleteMany
   */
  export type ReceivableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Receivables to delete
     */
    where?: ReceivableWhereInput
  }

  /**
   * Receivable without action
   */
  export type ReceivableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Receivable
     */
    select?: ReceivableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReceivableInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
    total: number | null
  }

  export type OrderSumAggregateOutputType = {
    quantity: number | null
    price: number | null
    total: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    price: number | null
    total: number | null
    status: string | null
    txHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    investorId: string | null
    fundId: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    price: number | null
    total: number | null
    status: string | null
    txHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    investorId: string | null
    fundId: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    quantity: number
    price: number
    total: number
    status: number
    txHash: number
    createdAt: number
    updatedAt: number
    investorId: number
    fundId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    quantity?: true
    price?: true
    total?: true
  }

  export type OrderSumAggregateInputType = {
    quantity?: true
    price?: true
    total?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    status?: true
    txHash?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    fundId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    status?: true
    txHash?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    fundId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    quantity?: true
    price?: true
    total?: true
    status?: true
    txHash?: true
    createdAt?: true
    updatedAt?: true
    investorId?: true
    fundId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    quantity: number
    price: number
    total: number
    status: string
    txHash: string | null
    createdAt: Date
    updatedAt: Date
    investorId: string
    fundId: string
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    price?: boolean
    total?: boolean
    status?: boolean
    txHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    investorId?: boolean
    fundId?: boolean
    investor?: boolean | UserDefaultArgs<ExtArgs>
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    price?: boolean
    total?: boolean
    status?: boolean
    txHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    investorId?: boolean
    fundId?: boolean
    investor?: boolean | UserDefaultArgs<ExtArgs>
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    quantity?: boolean
    price?: boolean
    total?: boolean
    status?: boolean
    txHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    investorId?: boolean
    fundId?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investor?: boolean | UserDefaultArgs<ExtArgs>
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investor?: boolean | UserDefaultArgs<ExtArgs>
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      investor: Prisma.$UserPayload<ExtArgs>
      fund: Prisma.$FundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      price: number
      total: number
      status: string
      txHash: string | null
      createdAt: Date
      updatedAt: Date
      investorId: string
      fundId: string
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    investor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fund<T extends FundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FundDefaultArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly quantity: FieldRef<"Order", 'Int'>
    readonly price: FieldRef<"Order", 'Float'>
    readonly total: FieldRef<"Order", 'Float'>
    readonly status: FieldRef<"Order", 'String'>
    readonly txHash: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly investorId: FieldRef<"Order", 'String'>
    readonly fundId: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    status: 'status',
    publicKey: 'publicKey',
    secretKey: 'secretKey',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CedenteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    document: 'document',
    address: 'address',
    publicKey: 'publicKey',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    consultorId: 'consultorId'
  };

  export type CedenteScalarFieldEnum = (typeof CedenteScalarFieldEnum)[keyof typeof CedenteScalarFieldEnum]


  export const SacadoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    document: 'document',
    address: 'address',
    publicKey: 'publicKey',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    consultorId: 'consultorId'
  };

  export type SacadoScalarFieldEnum = (typeof SacadoScalarFieldEnum)[keyof typeof SacadoScalarFieldEnum]


  export const FundScalarFieldEnum: {
    id: 'id',
    name: 'name',
    symbol: 'symbol',
    contractAddress: 'contractAddress',
    tokenContractId: 'tokenContractId',
    vaultContractId: 'vaultContractId',
    adminSecretKey: 'adminSecretKey',
    maxSupply: 'maxSupply',
    totalIssued: 'totalIssued',
    price: 'price',
    status: 'status',
    targetAmount: 'targetAmount',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    consultorId: 'consultorId'
  };

  export type FundScalarFieldEnum = (typeof FundScalarFieldEnum)[keyof typeof FundScalarFieldEnum]


  export const ReceivableScalarFieldEnum: {
    id: 'id',
    faceValue: 'faceValue',
    dueDate: 'dueDate',
    status: 'status',
    paidValue: 'paidValue',
    paidAt: 'paidAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fundId: 'fundId',
    sacadoId: 'sacadoId'
  };

  export type ReceivableScalarFieldEnum = (typeof ReceivableScalarFieldEnum)[keyof typeof ReceivableScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    price: 'price',
    total: 'total',
    status: 'status',
    txHash: 'txHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    investorId: 'investorId',
    fundId: 'fundId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    publicKey?: StringNullableFilter<"User"> | string | null
    secretKey?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    cedentes?: CedenteListRelationFilter
    sacados?: SacadoListRelationFilter
    funds?: FundListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    publicKey?: SortOrderInput | SortOrder
    secretKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    cedentes?: CedenteOrderByRelationAggregateInput
    sacados?: SacadoOrderByRelationAggregateInput
    funds?: FundOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    publicKey?: StringNullableFilter<"User"> | string | null
    secretKey?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    cedentes?: CedenteListRelationFilter
    sacados?: SacadoListRelationFilter
    funds?: FundListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    publicKey?: SortOrderInput | SortOrder
    secretKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    publicKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    secretKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CedenteWhereInput = {
    AND?: CedenteWhereInput | CedenteWhereInput[]
    OR?: CedenteWhereInput[]
    NOT?: CedenteWhereInput | CedenteWhereInput[]
    id?: StringFilter<"Cedente"> | string
    name?: StringFilter<"Cedente"> | string
    document?: StringFilter<"Cedente"> | string
    address?: StringNullableFilter<"Cedente"> | string | null
    publicKey?: StringNullableFilter<"Cedente"> | string | null
    status?: StringFilter<"Cedente"> | string
    createdAt?: DateTimeFilter<"Cedente"> | Date | string
    updatedAt?: DateTimeFilter<"Cedente"> | Date | string
    consultorId?: StringFilter<"Cedente"> | string
    consultor?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CedenteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
    consultor?: UserOrderByWithRelationInput
  }

  export type CedenteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CedenteWhereInput | CedenteWhereInput[]
    OR?: CedenteWhereInput[]
    NOT?: CedenteWhereInput | CedenteWhereInput[]
    name?: StringFilter<"Cedente"> | string
    document?: StringFilter<"Cedente"> | string
    address?: StringNullableFilter<"Cedente"> | string | null
    publicKey?: StringNullableFilter<"Cedente"> | string | null
    status?: StringFilter<"Cedente"> | string
    createdAt?: DateTimeFilter<"Cedente"> | Date | string
    updatedAt?: DateTimeFilter<"Cedente"> | Date | string
    consultorId?: StringFilter<"Cedente"> | string
    consultor?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CedenteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
    _count?: CedenteCountOrderByAggregateInput
    _max?: CedenteMaxOrderByAggregateInput
    _min?: CedenteMinOrderByAggregateInput
  }

  export type CedenteScalarWhereWithAggregatesInput = {
    AND?: CedenteScalarWhereWithAggregatesInput | CedenteScalarWhereWithAggregatesInput[]
    OR?: CedenteScalarWhereWithAggregatesInput[]
    NOT?: CedenteScalarWhereWithAggregatesInput | CedenteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cedente"> | string
    name?: StringWithAggregatesFilter<"Cedente"> | string
    document?: StringWithAggregatesFilter<"Cedente"> | string
    address?: StringNullableWithAggregatesFilter<"Cedente"> | string | null
    publicKey?: StringNullableWithAggregatesFilter<"Cedente"> | string | null
    status?: StringWithAggregatesFilter<"Cedente"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Cedente"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Cedente"> | Date | string
    consultorId?: StringWithAggregatesFilter<"Cedente"> | string
  }

  export type SacadoWhereInput = {
    AND?: SacadoWhereInput | SacadoWhereInput[]
    OR?: SacadoWhereInput[]
    NOT?: SacadoWhereInput | SacadoWhereInput[]
    id?: StringFilter<"Sacado"> | string
    name?: StringFilter<"Sacado"> | string
    document?: StringFilter<"Sacado"> | string
    address?: StringNullableFilter<"Sacado"> | string | null
    publicKey?: StringNullableFilter<"Sacado"> | string | null
    status?: StringFilter<"Sacado"> | string
    createdAt?: DateTimeFilter<"Sacado"> | Date | string
    updatedAt?: DateTimeFilter<"Sacado"> | Date | string
    consultorId?: StringFilter<"Sacado"> | string
    consultor?: XOR<UserRelationFilter, UserWhereInput>
    receivables?: ReceivableListRelationFilter
  }

  export type SacadoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
    consultor?: UserOrderByWithRelationInput
    receivables?: ReceivableOrderByRelationAggregateInput
  }

  export type SacadoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SacadoWhereInput | SacadoWhereInput[]
    OR?: SacadoWhereInput[]
    NOT?: SacadoWhereInput | SacadoWhereInput[]
    name?: StringFilter<"Sacado"> | string
    document?: StringFilter<"Sacado"> | string
    address?: StringNullableFilter<"Sacado"> | string | null
    publicKey?: StringNullableFilter<"Sacado"> | string | null
    status?: StringFilter<"Sacado"> | string
    createdAt?: DateTimeFilter<"Sacado"> | Date | string
    updatedAt?: DateTimeFilter<"Sacado"> | Date | string
    consultorId?: StringFilter<"Sacado"> | string
    consultor?: XOR<UserRelationFilter, UserWhereInput>
    receivables?: ReceivableListRelationFilter
  }, "id">

  export type SacadoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrderInput | SortOrder
    publicKey?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
    _count?: SacadoCountOrderByAggregateInput
    _max?: SacadoMaxOrderByAggregateInput
    _min?: SacadoMinOrderByAggregateInput
  }

  export type SacadoScalarWhereWithAggregatesInput = {
    AND?: SacadoScalarWhereWithAggregatesInput | SacadoScalarWhereWithAggregatesInput[]
    OR?: SacadoScalarWhereWithAggregatesInput[]
    NOT?: SacadoScalarWhereWithAggregatesInput | SacadoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sacado"> | string
    name?: StringWithAggregatesFilter<"Sacado"> | string
    document?: StringWithAggregatesFilter<"Sacado"> | string
    address?: StringNullableWithAggregatesFilter<"Sacado"> | string | null
    publicKey?: StringNullableWithAggregatesFilter<"Sacado"> | string | null
    status?: StringWithAggregatesFilter<"Sacado"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Sacado"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sacado"> | Date | string
    consultorId?: StringWithAggregatesFilter<"Sacado"> | string
  }

  export type FundWhereInput = {
    AND?: FundWhereInput | FundWhereInput[]
    OR?: FundWhereInput[]
    NOT?: FundWhereInput | FundWhereInput[]
    id?: StringFilter<"Fund"> | string
    name?: StringFilter<"Fund"> | string
    symbol?: StringFilter<"Fund"> | string
    contractAddress?: StringNullableFilter<"Fund"> | string | null
    tokenContractId?: StringNullableFilter<"Fund"> | string | null
    vaultContractId?: StringNullableFilter<"Fund"> | string | null
    adminSecretKey?: StringNullableFilter<"Fund"> | string | null
    maxSupply?: IntFilter<"Fund"> | number
    totalIssued?: IntFilter<"Fund"> | number
    price?: FloatFilter<"Fund"> | number
    status?: StringFilter<"Fund"> | string
    targetAmount?: FloatNullableFilter<"Fund"> | number | null
    description?: StringNullableFilter<"Fund"> | string | null
    createdAt?: DateTimeFilter<"Fund"> | Date | string
    updatedAt?: DateTimeFilter<"Fund"> | Date | string
    consultorId?: StringNullableFilter<"Fund"> | string | null
    consultor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    receivables?: ReceivableListRelationFilter
    orders?: OrderListRelationFilter
  }

  export type FundOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    contractAddress?: SortOrderInput | SortOrder
    tokenContractId?: SortOrderInput | SortOrder
    vaultContractId?: SortOrderInput | SortOrder
    adminSecretKey?: SortOrderInput | SortOrder
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    status?: SortOrder
    targetAmount?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrderInput | SortOrder
    consultor?: UserOrderByWithRelationInput
    receivables?: ReceivableOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
  }

  export type FundWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    symbol?: string
    AND?: FundWhereInput | FundWhereInput[]
    OR?: FundWhereInput[]
    NOT?: FundWhereInput | FundWhereInput[]
    name?: StringFilter<"Fund"> | string
    contractAddress?: StringNullableFilter<"Fund"> | string | null
    tokenContractId?: StringNullableFilter<"Fund"> | string | null
    vaultContractId?: StringNullableFilter<"Fund"> | string | null
    adminSecretKey?: StringNullableFilter<"Fund"> | string | null
    maxSupply?: IntFilter<"Fund"> | number
    totalIssued?: IntFilter<"Fund"> | number
    price?: FloatFilter<"Fund"> | number
    status?: StringFilter<"Fund"> | string
    targetAmount?: FloatNullableFilter<"Fund"> | number | null
    description?: StringNullableFilter<"Fund"> | string | null
    createdAt?: DateTimeFilter<"Fund"> | Date | string
    updatedAt?: DateTimeFilter<"Fund"> | Date | string
    consultorId?: StringNullableFilter<"Fund"> | string | null
    consultor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    receivables?: ReceivableListRelationFilter
    orders?: OrderListRelationFilter
  }, "id" | "symbol">

  export type FundOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    contractAddress?: SortOrderInput | SortOrder
    tokenContractId?: SortOrderInput | SortOrder
    vaultContractId?: SortOrderInput | SortOrder
    adminSecretKey?: SortOrderInput | SortOrder
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    status?: SortOrder
    targetAmount?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrderInput | SortOrder
    _count?: FundCountOrderByAggregateInput
    _avg?: FundAvgOrderByAggregateInput
    _max?: FundMaxOrderByAggregateInput
    _min?: FundMinOrderByAggregateInput
    _sum?: FundSumOrderByAggregateInput
  }

  export type FundScalarWhereWithAggregatesInput = {
    AND?: FundScalarWhereWithAggregatesInput | FundScalarWhereWithAggregatesInput[]
    OR?: FundScalarWhereWithAggregatesInput[]
    NOT?: FundScalarWhereWithAggregatesInput | FundScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fund"> | string
    name?: StringWithAggregatesFilter<"Fund"> | string
    symbol?: StringWithAggregatesFilter<"Fund"> | string
    contractAddress?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    tokenContractId?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    vaultContractId?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    adminSecretKey?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    maxSupply?: IntWithAggregatesFilter<"Fund"> | number
    totalIssued?: IntWithAggregatesFilter<"Fund"> | number
    price?: FloatWithAggregatesFilter<"Fund"> | number
    status?: StringWithAggregatesFilter<"Fund"> | string
    targetAmount?: FloatNullableWithAggregatesFilter<"Fund"> | number | null
    description?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Fund"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Fund"> | Date | string
    consultorId?: StringNullableWithAggregatesFilter<"Fund"> | string | null
  }

  export type ReceivableWhereInput = {
    AND?: ReceivableWhereInput | ReceivableWhereInput[]
    OR?: ReceivableWhereInput[]
    NOT?: ReceivableWhereInput | ReceivableWhereInput[]
    id?: StringFilter<"Receivable"> | string
    faceValue?: FloatFilter<"Receivable"> | number
    dueDate?: DateTimeFilter<"Receivable"> | Date | string
    status?: StringFilter<"Receivable"> | string
    paidValue?: FloatNullableFilter<"Receivable"> | number | null
    paidAt?: DateTimeNullableFilter<"Receivable"> | Date | string | null
    createdAt?: DateTimeFilter<"Receivable"> | Date | string
    updatedAt?: DateTimeFilter<"Receivable"> | Date | string
    fundId?: StringFilter<"Receivable"> | string
    sacadoId?: StringFilter<"Receivable"> | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
    sacado?: XOR<SacadoRelationFilter, SacadoWhereInput>
  }

  export type ReceivableOrderByWithRelationInput = {
    id?: SortOrder
    faceValue?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    paidValue?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fundId?: SortOrder
    sacadoId?: SortOrder
    fund?: FundOrderByWithRelationInput
    sacado?: SacadoOrderByWithRelationInput
  }

  export type ReceivableWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReceivableWhereInput | ReceivableWhereInput[]
    OR?: ReceivableWhereInput[]
    NOT?: ReceivableWhereInput | ReceivableWhereInput[]
    faceValue?: FloatFilter<"Receivable"> | number
    dueDate?: DateTimeFilter<"Receivable"> | Date | string
    status?: StringFilter<"Receivable"> | string
    paidValue?: FloatNullableFilter<"Receivable"> | number | null
    paidAt?: DateTimeNullableFilter<"Receivable"> | Date | string | null
    createdAt?: DateTimeFilter<"Receivable"> | Date | string
    updatedAt?: DateTimeFilter<"Receivable"> | Date | string
    fundId?: StringFilter<"Receivable"> | string
    sacadoId?: StringFilter<"Receivable"> | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
    sacado?: XOR<SacadoRelationFilter, SacadoWhereInput>
  }, "id">

  export type ReceivableOrderByWithAggregationInput = {
    id?: SortOrder
    faceValue?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    paidValue?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fundId?: SortOrder
    sacadoId?: SortOrder
    _count?: ReceivableCountOrderByAggregateInput
    _avg?: ReceivableAvgOrderByAggregateInput
    _max?: ReceivableMaxOrderByAggregateInput
    _min?: ReceivableMinOrderByAggregateInput
    _sum?: ReceivableSumOrderByAggregateInput
  }

  export type ReceivableScalarWhereWithAggregatesInput = {
    AND?: ReceivableScalarWhereWithAggregatesInput | ReceivableScalarWhereWithAggregatesInput[]
    OR?: ReceivableScalarWhereWithAggregatesInput[]
    NOT?: ReceivableScalarWhereWithAggregatesInput | ReceivableScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Receivable"> | string
    faceValue?: FloatWithAggregatesFilter<"Receivable"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Receivable"> | Date | string
    status?: StringWithAggregatesFilter<"Receivable"> | string
    paidValue?: FloatNullableWithAggregatesFilter<"Receivable"> | number | null
    paidAt?: DateTimeNullableWithAggregatesFilter<"Receivable"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Receivable"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Receivable"> | Date | string
    fundId?: StringWithAggregatesFilter<"Receivable"> | string
    sacadoId?: StringWithAggregatesFilter<"Receivable"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    quantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    total?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    txHash?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    investorId?: StringFilter<"Order"> | string
    fundId?: StringFilter<"Order"> | string
    investor?: XOR<UserRelationFilter, UserWhereInput>
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    status?: SortOrder
    txHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    fundId?: SortOrder
    investor?: UserOrderByWithRelationInput
    fund?: FundOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    quantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    total?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    txHash?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    investorId?: StringFilter<"Order"> | string
    fundId?: StringFilter<"Order"> | string
    investor?: XOR<UserRelationFilter, UserWhereInput>
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    status?: SortOrder
    txHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    fundId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    quantity?: IntWithAggregatesFilter<"Order"> | number
    price?: FloatWithAggregatesFilter<"Order"> | number
    total?: FloatWithAggregatesFilter<"Order"> | number
    status?: StringWithAggregatesFilter<"Order"> | string
    txHash?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    investorId?: StringWithAggregatesFilter<"Order"> | string
    fundId?: StringWithAggregatesFilter<"Order"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteCreateNestedManyWithoutConsultorInput
    sacados?: SacadoCreateNestedManyWithoutConsultorInput
    funds?: FundCreateNestedManyWithoutConsultorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteUncheckedCreateNestedManyWithoutConsultorInput
    sacados?: SacadoUncheckedCreateNestedManyWithoutConsultorInput
    funds?: FundUncheckedCreateNestedManyWithoutConsultorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUpdateManyWithoutConsultorNestedInput
    funds?: FundUpdateManyWithoutConsultorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUncheckedUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUncheckedUpdateManyWithoutConsultorNestedInput
    funds?: FundUncheckedUpdateManyWithoutConsultorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CedenteCreateInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor: UserCreateNestedOneWithoutCedentesInput
  }

  export type CedenteUncheckedCreateInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId: string
  }

  export type CedenteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneRequiredWithoutCedentesNestedInput
  }

  export type CedenteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: StringFieldUpdateOperationsInput | string
  }

  export type CedenteCreateManyInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId: string
  }

  export type CedenteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CedenteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: StringFieldUpdateOperationsInput | string
  }

  export type SacadoCreateInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor: UserCreateNestedOneWithoutSacadosInput
    receivables?: ReceivableCreateNestedManyWithoutSacadoInput
  }

  export type SacadoUncheckedCreateInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId: string
    receivables?: ReceivableUncheckedCreateNestedManyWithoutSacadoInput
  }

  export type SacadoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneRequiredWithoutSacadosNestedInput
    receivables?: ReceivableUpdateManyWithoutSacadoNestedInput
  }

  export type SacadoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: StringFieldUpdateOperationsInput | string
    receivables?: ReceivableUncheckedUpdateManyWithoutSacadoNestedInput
  }

  export type SacadoCreateManyInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId: string
  }

  export type SacadoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SacadoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: StringFieldUpdateOperationsInput | string
  }

  export type FundCreateInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor?: UserCreateNestedOneWithoutFundsInput
    receivables?: ReceivableCreateNestedManyWithoutFundInput
    orders?: OrderCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId?: string | null
    receivables?: ReceivableUncheckedCreateNestedManyWithoutFundInput
    orders?: OrderUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneWithoutFundsNestedInput
    receivables?: ReceivableUpdateManyWithoutFundNestedInput
    orders?: OrderUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: NullableStringFieldUpdateOperationsInput | string | null
    receivables?: ReceivableUncheckedUpdateManyWithoutFundNestedInput
    orders?: OrderUncheckedUpdateManyWithoutFundNestedInput
  }

  export type FundCreateManyInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId?: string | null
  }

  export type FundUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReceivableCreateInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fund: FundCreateNestedOneWithoutReceivablesInput
    sacado: SacadoCreateNestedOneWithoutReceivablesInput
  }

  export type ReceivableUncheckedCreateInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
    sacadoId: string
  }

  export type ReceivableUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fund?: FundUpdateOneRequiredWithoutReceivablesNestedInput
    sacado?: SacadoUpdateOneRequiredWithoutReceivablesNestedInput
  }

  export type ReceivableUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
    sacadoId?: StringFieldUpdateOperationsInput | string
  }

  export type ReceivableCreateManyInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
    sacadoId: string
  }

  export type ReceivableUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceivableUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
    sacadoId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investor: UserCreateNestedOneWithoutOrdersInput
    fund: FundCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId: string
    fundId: string
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investor?: UserUpdateOneRequiredWithoutOrdersNestedInput
    fund?: FundUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateManyInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId: string
    fundId: string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type CedenteListRelationFilter = {
    every?: CedenteWhereInput
    some?: CedenteWhereInput
    none?: CedenteWhereInput
  }

  export type SacadoListRelationFilter = {
    every?: SacadoWhereInput
    some?: SacadoWhereInput
    none?: SacadoWhereInput
  }

  export type FundListRelationFilter = {
    every?: FundWhereInput
    some?: FundWhereInput
    none?: FundWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CedenteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SacadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    publicKey?: SortOrder
    secretKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    publicKey?: SortOrder
    secretKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    status?: SortOrder
    publicKey?: SortOrder
    secretKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CedenteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type CedenteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type CedenteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type ReceivableListRelationFilter = {
    every?: ReceivableWhereInput
    some?: ReceivableWhereInput
    none?: ReceivableWhereInput
  }

  export type ReceivableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SacadoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type SacadoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type SacadoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    document?: SortOrder
    address?: SortOrder
    publicKey?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FundCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    contractAddress?: SortOrder
    tokenContractId?: SortOrder
    vaultContractId?: SortOrder
    adminSecretKey?: SortOrder
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    status?: SortOrder
    targetAmount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type FundAvgOrderByAggregateInput = {
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    targetAmount?: SortOrder
  }

  export type FundMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    contractAddress?: SortOrder
    tokenContractId?: SortOrder
    vaultContractId?: SortOrder
    adminSecretKey?: SortOrder
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    status?: SortOrder
    targetAmount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type FundMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    contractAddress?: SortOrder
    tokenContractId?: SortOrder
    vaultContractId?: SortOrder
    adminSecretKey?: SortOrder
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    status?: SortOrder
    targetAmount?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    consultorId?: SortOrder
  }

  export type FundSumOrderByAggregateInput = {
    maxSupply?: SortOrder
    totalIssued?: SortOrder
    price?: SortOrder
    targetAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FundRelationFilter = {
    is?: FundWhereInput
    isNot?: FundWhereInput
  }

  export type SacadoRelationFilter = {
    is?: SacadoWhereInput
    isNot?: SacadoWhereInput
  }

  export type ReceivableCountOrderByAggregateInput = {
    id?: SortOrder
    faceValue?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    paidValue?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fundId?: SortOrder
    sacadoId?: SortOrder
  }

  export type ReceivableAvgOrderByAggregateInput = {
    faceValue?: SortOrder
    paidValue?: SortOrder
  }

  export type ReceivableMaxOrderByAggregateInput = {
    id?: SortOrder
    faceValue?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    paidValue?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fundId?: SortOrder
    sacadoId?: SortOrder
  }

  export type ReceivableMinOrderByAggregateInput = {
    id?: SortOrder
    faceValue?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    paidValue?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fundId?: SortOrder
    sacadoId?: SortOrder
  }

  export type ReceivableSumOrderByAggregateInput = {
    faceValue?: SortOrder
    paidValue?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    status?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    fundId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    status?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    fundId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
    status?: SortOrder
    txHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    investorId?: SortOrder
    fundId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    total?: SortOrder
  }

  export type OrderCreateNestedManyWithoutInvestorInput = {
    create?: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput> | OrderCreateWithoutInvestorInput[] | OrderUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInvestorInput | OrderCreateOrConnectWithoutInvestorInput[]
    createMany?: OrderCreateManyInvestorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CedenteCreateNestedManyWithoutConsultorInput = {
    create?: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput> | CedenteCreateWithoutConsultorInput[] | CedenteUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: CedenteCreateOrConnectWithoutConsultorInput | CedenteCreateOrConnectWithoutConsultorInput[]
    createMany?: CedenteCreateManyConsultorInputEnvelope
    connect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
  }

  export type SacadoCreateNestedManyWithoutConsultorInput = {
    create?: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput> | SacadoCreateWithoutConsultorInput[] | SacadoUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: SacadoCreateOrConnectWithoutConsultorInput | SacadoCreateOrConnectWithoutConsultorInput[]
    createMany?: SacadoCreateManyConsultorInputEnvelope
    connect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
  }

  export type FundCreateNestedManyWithoutConsultorInput = {
    create?: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput> | FundCreateWithoutConsultorInput[] | FundUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: FundCreateOrConnectWithoutConsultorInput | FundCreateOrConnectWithoutConsultorInput[]
    createMany?: FundCreateManyConsultorInputEnvelope
    connect?: FundWhereUniqueInput | FundWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput> | OrderCreateWithoutInvestorInput[] | OrderUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInvestorInput | OrderCreateOrConnectWithoutInvestorInput[]
    createMany?: OrderCreateManyInvestorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CedenteUncheckedCreateNestedManyWithoutConsultorInput = {
    create?: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput> | CedenteCreateWithoutConsultorInput[] | CedenteUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: CedenteCreateOrConnectWithoutConsultorInput | CedenteCreateOrConnectWithoutConsultorInput[]
    createMany?: CedenteCreateManyConsultorInputEnvelope
    connect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
  }

  export type SacadoUncheckedCreateNestedManyWithoutConsultorInput = {
    create?: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput> | SacadoCreateWithoutConsultorInput[] | SacadoUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: SacadoCreateOrConnectWithoutConsultorInput | SacadoCreateOrConnectWithoutConsultorInput[]
    createMany?: SacadoCreateManyConsultorInputEnvelope
    connect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
  }

  export type FundUncheckedCreateNestedManyWithoutConsultorInput = {
    create?: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput> | FundCreateWithoutConsultorInput[] | FundUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: FundCreateOrConnectWithoutConsultorInput | FundCreateOrConnectWithoutConsultorInput[]
    createMany?: FundCreateManyConsultorInputEnvelope
    connect?: FundWhereUniqueInput | FundWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrderUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput> | OrderCreateWithoutInvestorInput[] | OrderUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInvestorInput | OrderCreateOrConnectWithoutInvestorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutInvestorInput | OrderUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: OrderCreateManyInvestorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutInvestorInput | OrderUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutInvestorInput | OrderUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CedenteUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput> | CedenteCreateWithoutConsultorInput[] | CedenteUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: CedenteCreateOrConnectWithoutConsultorInput | CedenteCreateOrConnectWithoutConsultorInput[]
    upsert?: CedenteUpsertWithWhereUniqueWithoutConsultorInput | CedenteUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: CedenteCreateManyConsultorInputEnvelope
    set?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    disconnect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    delete?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    connect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    update?: CedenteUpdateWithWhereUniqueWithoutConsultorInput | CedenteUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: CedenteUpdateManyWithWhereWithoutConsultorInput | CedenteUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: CedenteScalarWhereInput | CedenteScalarWhereInput[]
  }

  export type SacadoUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput> | SacadoCreateWithoutConsultorInput[] | SacadoUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: SacadoCreateOrConnectWithoutConsultorInput | SacadoCreateOrConnectWithoutConsultorInput[]
    upsert?: SacadoUpsertWithWhereUniqueWithoutConsultorInput | SacadoUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: SacadoCreateManyConsultorInputEnvelope
    set?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    disconnect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    delete?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    connect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    update?: SacadoUpdateWithWhereUniqueWithoutConsultorInput | SacadoUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: SacadoUpdateManyWithWhereWithoutConsultorInput | SacadoUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: SacadoScalarWhereInput | SacadoScalarWhereInput[]
  }

  export type FundUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput> | FundCreateWithoutConsultorInput[] | FundUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: FundCreateOrConnectWithoutConsultorInput | FundCreateOrConnectWithoutConsultorInput[]
    upsert?: FundUpsertWithWhereUniqueWithoutConsultorInput | FundUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: FundCreateManyConsultorInputEnvelope
    set?: FundWhereUniqueInput | FundWhereUniqueInput[]
    disconnect?: FundWhereUniqueInput | FundWhereUniqueInput[]
    delete?: FundWhereUniqueInput | FundWhereUniqueInput[]
    connect?: FundWhereUniqueInput | FundWhereUniqueInput[]
    update?: FundUpdateWithWhereUniqueWithoutConsultorInput | FundUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: FundUpdateManyWithWhereWithoutConsultorInput | FundUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: FundScalarWhereInput | FundScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput> | OrderCreateWithoutInvestorInput[] | OrderUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInvestorInput | OrderCreateOrConnectWithoutInvestorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutInvestorInput | OrderUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: OrderCreateManyInvestorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutInvestorInput | OrderUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutInvestorInput | OrderUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CedenteUncheckedUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput> | CedenteCreateWithoutConsultorInput[] | CedenteUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: CedenteCreateOrConnectWithoutConsultorInput | CedenteCreateOrConnectWithoutConsultorInput[]
    upsert?: CedenteUpsertWithWhereUniqueWithoutConsultorInput | CedenteUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: CedenteCreateManyConsultorInputEnvelope
    set?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    disconnect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    delete?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    connect?: CedenteWhereUniqueInput | CedenteWhereUniqueInput[]
    update?: CedenteUpdateWithWhereUniqueWithoutConsultorInput | CedenteUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: CedenteUpdateManyWithWhereWithoutConsultorInput | CedenteUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: CedenteScalarWhereInput | CedenteScalarWhereInput[]
  }

  export type SacadoUncheckedUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput> | SacadoCreateWithoutConsultorInput[] | SacadoUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: SacadoCreateOrConnectWithoutConsultorInput | SacadoCreateOrConnectWithoutConsultorInput[]
    upsert?: SacadoUpsertWithWhereUniqueWithoutConsultorInput | SacadoUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: SacadoCreateManyConsultorInputEnvelope
    set?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    disconnect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    delete?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    connect?: SacadoWhereUniqueInput | SacadoWhereUniqueInput[]
    update?: SacadoUpdateWithWhereUniqueWithoutConsultorInput | SacadoUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: SacadoUpdateManyWithWhereWithoutConsultorInput | SacadoUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: SacadoScalarWhereInput | SacadoScalarWhereInput[]
  }

  export type FundUncheckedUpdateManyWithoutConsultorNestedInput = {
    create?: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput> | FundCreateWithoutConsultorInput[] | FundUncheckedCreateWithoutConsultorInput[]
    connectOrCreate?: FundCreateOrConnectWithoutConsultorInput | FundCreateOrConnectWithoutConsultorInput[]
    upsert?: FundUpsertWithWhereUniqueWithoutConsultorInput | FundUpsertWithWhereUniqueWithoutConsultorInput[]
    createMany?: FundCreateManyConsultorInputEnvelope
    set?: FundWhereUniqueInput | FundWhereUniqueInput[]
    disconnect?: FundWhereUniqueInput | FundWhereUniqueInput[]
    delete?: FundWhereUniqueInput | FundWhereUniqueInput[]
    connect?: FundWhereUniqueInput | FundWhereUniqueInput[]
    update?: FundUpdateWithWhereUniqueWithoutConsultorInput | FundUpdateWithWhereUniqueWithoutConsultorInput[]
    updateMany?: FundUpdateManyWithWhereWithoutConsultorInput | FundUpdateManyWithWhereWithoutConsultorInput[]
    deleteMany?: FundScalarWhereInput | FundScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCedentesInput = {
    create?: XOR<UserCreateWithoutCedentesInput, UserUncheckedCreateWithoutCedentesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCedentesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCedentesNestedInput = {
    create?: XOR<UserCreateWithoutCedentesInput, UserUncheckedCreateWithoutCedentesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCedentesInput
    upsert?: UserUpsertWithoutCedentesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCedentesInput, UserUpdateWithoutCedentesInput>, UserUncheckedUpdateWithoutCedentesInput>
  }

  export type UserCreateNestedOneWithoutSacadosInput = {
    create?: XOR<UserCreateWithoutSacadosInput, UserUncheckedCreateWithoutSacadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutSacadosInput
    connect?: UserWhereUniqueInput
  }

  export type ReceivableCreateNestedManyWithoutSacadoInput = {
    create?: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput> | ReceivableCreateWithoutSacadoInput[] | ReceivableUncheckedCreateWithoutSacadoInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutSacadoInput | ReceivableCreateOrConnectWithoutSacadoInput[]
    createMany?: ReceivableCreateManySacadoInputEnvelope
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
  }

  export type ReceivableUncheckedCreateNestedManyWithoutSacadoInput = {
    create?: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput> | ReceivableCreateWithoutSacadoInput[] | ReceivableUncheckedCreateWithoutSacadoInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutSacadoInput | ReceivableCreateOrConnectWithoutSacadoInput[]
    createMany?: ReceivableCreateManySacadoInputEnvelope
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSacadosNestedInput = {
    create?: XOR<UserCreateWithoutSacadosInput, UserUncheckedCreateWithoutSacadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutSacadosInput
    upsert?: UserUpsertWithoutSacadosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSacadosInput, UserUpdateWithoutSacadosInput>, UserUncheckedUpdateWithoutSacadosInput>
  }

  export type ReceivableUpdateManyWithoutSacadoNestedInput = {
    create?: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput> | ReceivableCreateWithoutSacadoInput[] | ReceivableUncheckedCreateWithoutSacadoInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutSacadoInput | ReceivableCreateOrConnectWithoutSacadoInput[]
    upsert?: ReceivableUpsertWithWhereUniqueWithoutSacadoInput | ReceivableUpsertWithWhereUniqueWithoutSacadoInput[]
    createMany?: ReceivableCreateManySacadoInputEnvelope
    set?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    disconnect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    delete?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    update?: ReceivableUpdateWithWhereUniqueWithoutSacadoInput | ReceivableUpdateWithWhereUniqueWithoutSacadoInput[]
    updateMany?: ReceivableUpdateManyWithWhereWithoutSacadoInput | ReceivableUpdateManyWithWhereWithoutSacadoInput[]
    deleteMany?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
  }

  export type ReceivableUncheckedUpdateManyWithoutSacadoNestedInput = {
    create?: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput> | ReceivableCreateWithoutSacadoInput[] | ReceivableUncheckedCreateWithoutSacadoInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutSacadoInput | ReceivableCreateOrConnectWithoutSacadoInput[]
    upsert?: ReceivableUpsertWithWhereUniqueWithoutSacadoInput | ReceivableUpsertWithWhereUniqueWithoutSacadoInput[]
    createMany?: ReceivableCreateManySacadoInputEnvelope
    set?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    disconnect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    delete?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    update?: ReceivableUpdateWithWhereUniqueWithoutSacadoInput | ReceivableUpdateWithWhereUniqueWithoutSacadoInput[]
    updateMany?: ReceivableUpdateManyWithWhereWithoutSacadoInput | ReceivableUpdateManyWithWhereWithoutSacadoInput[]
    deleteMany?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFundsInput = {
    create?: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFundsInput
    connect?: UserWhereUniqueInput
  }

  export type ReceivableCreateNestedManyWithoutFundInput = {
    create?: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput> | ReceivableCreateWithoutFundInput[] | ReceivableUncheckedCreateWithoutFundInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutFundInput | ReceivableCreateOrConnectWithoutFundInput[]
    createMany?: ReceivableCreateManyFundInputEnvelope
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutFundInput = {
    create?: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput> | OrderCreateWithoutFundInput[] | OrderUncheckedCreateWithoutFundInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFundInput | OrderCreateOrConnectWithoutFundInput[]
    createMany?: OrderCreateManyFundInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ReceivableUncheckedCreateNestedManyWithoutFundInput = {
    create?: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput> | ReceivableCreateWithoutFundInput[] | ReceivableUncheckedCreateWithoutFundInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutFundInput | ReceivableCreateOrConnectWithoutFundInput[]
    createMany?: ReceivableCreateManyFundInputEnvelope
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutFundInput = {
    create?: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput> | OrderCreateWithoutFundInput[] | OrderUncheckedCreateWithoutFundInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFundInput | OrderCreateOrConnectWithoutFundInput[]
    createMany?: OrderCreateManyFundInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutFundsNestedInput = {
    create?: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFundsInput
    upsert?: UserUpsertWithoutFundsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFundsInput, UserUpdateWithoutFundsInput>, UserUncheckedUpdateWithoutFundsInput>
  }

  export type ReceivableUpdateManyWithoutFundNestedInput = {
    create?: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput> | ReceivableCreateWithoutFundInput[] | ReceivableUncheckedCreateWithoutFundInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutFundInput | ReceivableCreateOrConnectWithoutFundInput[]
    upsert?: ReceivableUpsertWithWhereUniqueWithoutFundInput | ReceivableUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: ReceivableCreateManyFundInputEnvelope
    set?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    disconnect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    delete?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    update?: ReceivableUpdateWithWhereUniqueWithoutFundInput | ReceivableUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: ReceivableUpdateManyWithWhereWithoutFundInput | ReceivableUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutFundNestedInput = {
    create?: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput> | OrderCreateWithoutFundInput[] | OrderUncheckedCreateWithoutFundInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFundInput | OrderCreateOrConnectWithoutFundInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutFundInput | OrderUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: OrderCreateManyFundInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutFundInput | OrderUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutFundInput | OrderUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ReceivableUncheckedUpdateManyWithoutFundNestedInput = {
    create?: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput> | ReceivableCreateWithoutFundInput[] | ReceivableUncheckedCreateWithoutFundInput[]
    connectOrCreate?: ReceivableCreateOrConnectWithoutFundInput | ReceivableCreateOrConnectWithoutFundInput[]
    upsert?: ReceivableUpsertWithWhereUniqueWithoutFundInput | ReceivableUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: ReceivableCreateManyFundInputEnvelope
    set?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    disconnect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    delete?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    connect?: ReceivableWhereUniqueInput | ReceivableWhereUniqueInput[]
    update?: ReceivableUpdateWithWhereUniqueWithoutFundInput | ReceivableUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: ReceivableUpdateManyWithWhereWithoutFundInput | ReceivableUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutFundNestedInput = {
    create?: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput> | OrderCreateWithoutFundInput[] | OrderUncheckedCreateWithoutFundInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutFundInput | OrderCreateOrConnectWithoutFundInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutFundInput | OrderUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: OrderCreateManyFundInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutFundInput | OrderUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutFundInput | OrderUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type FundCreateNestedOneWithoutReceivablesInput = {
    create?: XOR<FundCreateWithoutReceivablesInput, FundUncheckedCreateWithoutReceivablesInput>
    connectOrCreate?: FundCreateOrConnectWithoutReceivablesInput
    connect?: FundWhereUniqueInput
  }

  export type SacadoCreateNestedOneWithoutReceivablesInput = {
    create?: XOR<SacadoCreateWithoutReceivablesInput, SacadoUncheckedCreateWithoutReceivablesInput>
    connectOrCreate?: SacadoCreateOrConnectWithoutReceivablesInput
    connect?: SacadoWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FundUpdateOneRequiredWithoutReceivablesNestedInput = {
    create?: XOR<FundCreateWithoutReceivablesInput, FundUncheckedCreateWithoutReceivablesInput>
    connectOrCreate?: FundCreateOrConnectWithoutReceivablesInput
    upsert?: FundUpsertWithoutReceivablesInput
    connect?: FundWhereUniqueInput
    update?: XOR<XOR<FundUpdateToOneWithWhereWithoutReceivablesInput, FundUpdateWithoutReceivablesInput>, FundUncheckedUpdateWithoutReceivablesInput>
  }

  export type SacadoUpdateOneRequiredWithoutReceivablesNestedInput = {
    create?: XOR<SacadoCreateWithoutReceivablesInput, SacadoUncheckedCreateWithoutReceivablesInput>
    connectOrCreate?: SacadoCreateOrConnectWithoutReceivablesInput
    upsert?: SacadoUpsertWithoutReceivablesInput
    connect?: SacadoWhereUniqueInput
    update?: XOR<XOR<SacadoUpdateToOneWithWhereWithoutReceivablesInput, SacadoUpdateWithoutReceivablesInput>, SacadoUncheckedUpdateWithoutReceivablesInput>
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type FundCreateNestedOneWithoutOrdersInput = {
    create?: XOR<FundCreateWithoutOrdersInput, FundUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: FundCreateOrConnectWithoutOrdersInput
    connect?: FundWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type FundUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<FundCreateWithoutOrdersInput, FundUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: FundCreateOrConnectWithoutOrdersInput
    upsert?: FundUpsertWithoutOrdersInput
    connect?: FundWhereUniqueInput
    update?: XOR<XOR<FundUpdateToOneWithWhereWithoutOrdersInput, FundUpdateWithoutOrdersInput>, FundUncheckedUpdateWithoutOrdersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OrderCreateWithoutInvestorInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fund: FundCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutInvestorInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
  }

  export type OrderCreateOrConnectWithoutInvestorInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput>
  }

  export type OrderCreateManyInvestorInputEnvelope = {
    data: OrderCreateManyInvestorInput | OrderCreateManyInvestorInput[]
  }

  export type CedenteCreateWithoutConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CedenteUncheckedCreateWithoutConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CedenteCreateOrConnectWithoutConsultorInput = {
    where: CedenteWhereUniqueInput
    create: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput>
  }

  export type CedenteCreateManyConsultorInputEnvelope = {
    data: CedenteCreateManyConsultorInput | CedenteCreateManyConsultorInput[]
  }

  export type SacadoCreateWithoutConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receivables?: ReceivableCreateNestedManyWithoutSacadoInput
  }

  export type SacadoUncheckedCreateWithoutConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    receivables?: ReceivableUncheckedCreateNestedManyWithoutSacadoInput
  }

  export type SacadoCreateOrConnectWithoutConsultorInput = {
    where: SacadoWhereUniqueInput
    create: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput>
  }

  export type SacadoCreateManyConsultorInputEnvelope = {
    data: SacadoCreateManyConsultorInput | SacadoCreateManyConsultorInput[]
  }

  export type FundCreateWithoutConsultorInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receivables?: ReceivableCreateNestedManyWithoutFundInput
    orders?: OrderCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateWithoutConsultorInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    receivables?: ReceivableUncheckedCreateNestedManyWithoutFundInput
    orders?: OrderUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundCreateOrConnectWithoutConsultorInput = {
    where: FundWhereUniqueInput
    create: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput>
  }

  export type FundCreateManyConsultorInputEnvelope = {
    data: FundCreateManyConsultorInput | FundCreateManyConsultorInput[]
  }

  export type OrderUpsertWithWhereUniqueWithoutInvestorInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutInvestorInput, OrderUncheckedUpdateWithoutInvestorInput>
    create: XOR<OrderCreateWithoutInvestorInput, OrderUncheckedCreateWithoutInvestorInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutInvestorInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutInvestorInput, OrderUncheckedUpdateWithoutInvestorInput>
  }

  export type OrderUpdateManyWithWhereWithoutInvestorInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutInvestorInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    quantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    total?: FloatFilter<"Order"> | number
    status?: StringFilter<"Order"> | string
    txHash?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    investorId?: StringFilter<"Order"> | string
    fundId?: StringFilter<"Order"> | string
  }

  export type CedenteUpsertWithWhereUniqueWithoutConsultorInput = {
    where: CedenteWhereUniqueInput
    update: XOR<CedenteUpdateWithoutConsultorInput, CedenteUncheckedUpdateWithoutConsultorInput>
    create: XOR<CedenteCreateWithoutConsultorInput, CedenteUncheckedCreateWithoutConsultorInput>
  }

  export type CedenteUpdateWithWhereUniqueWithoutConsultorInput = {
    where: CedenteWhereUniqueInput
    data: XOR<CedenteUpdateWithoutConsultorInput, CedenteUncheckedUpdateWithoutConsultorInput>
  }

  export type CedenteUpdateManyWithWhereWithoutConsultorInput = {
    where: CedenteScalarWhereInput
    data: XOR<CedenteUpdateManyMutationInput, CedenteUncheckedUpdateManyWithoutConsultorInput>
  }

  export type CedenteScalarWhereInput = {
    AND?: CedenteScalarWhereInput | CedenteScalarWhereInput[]
    OR?: CedenteScalarWhereInput[]
    NOT?: CedenteScalarWhereInput | CedenteScalarWhereInput[]
    id?: StringFilter<"Cedente"> | string
    name?: StringFilter<"Cedente"> | string
    document?: StringFilter<"Cedente"> | string
    address?: StringNullableFilter<"Cedente"> | string | null
    publicKey?: StringNullableFilter<"Cedente"> | string | null
    status?: StringFilter<"Cedente"> | string
    createdAt?: DateTimeFilter<"Cedente"> | Date | string
    updatedAt?: DateTimeFilter<"Cedente"> | Date | string
    consultorId?: StringFilter<"Cedente"> | string
  }

  export type SacadoUpsertWithWhereUniqueWithoutConsultorInput = {
    where: SacadoWhereUniqueInput
    update: XOR<SacadoUpdateWithoutConsultorInput, SacadoUncheckedUpdateWithoutConsultorInput>
    create: XOR<SacadoCreateWithoutConsultorInput, SacadoUncheckedCreateWithoutConsultorInput>
  }

  export type SacadoUpdateWithWhereUniqueWithoutConsultorInput = {
    where: SacadoWhereUniqueInput
    data: XOR<SacadoUpdateWithoutConsultorInput, SacadoUncheckedUpdateWithoutConsultorInput>
  }

  export type SacadoUpdateManyWithWhereWithoutConsultorInput = {
    where: SacadoScalarWhereInput
    data: XOR<SacadoUpdateManyMutationInput, SacadoUncheckedUpdateManyWithoutConsultorInput>
  }

  export type SacadoScalarWhereInput = {
    AND?: SacadoScalarWhereInput | SacadoScalarWhereInput[]
    OR?: SacadoScalarWhereInput[]
    NOT?: SacadoScalarWhereInput | SacadoScalarWhereInput[]
    id?: StringFilter<"Sacado"> | string
    name?: StringFilter<"Sacado"> | string
    document?: StringFilter<"Sacado"> | string
    address?: StringNullableFilter<"Sacado"> | string | null
    publicKey?: StringNullableFilter<"Sacado"> | string | null
    status?: StringFilter<"Sacado"> | string
    createdAt?: DateTimeFilter<"Sacado"> | Date | string
    updatedAt?: DateTimeFilter<"Sacado"> | Date | string
    consultorId?: StringFilter<"Sacado"> | string
  }

  export type FundUpsertWithWhereUniqueWithoutConsultorInput = {
    where: FundWhereUniqueInput
    update: XOR<FundUpdateWithoutConsultorInput, FundUncheckedUpdateWithoutConsultorInput>
    create: XOR<FundCreateWithoutConsultorInput, FundUncheckedCreateWithoutConsultorInput>
  }

  export type FundUpdateWithWhereUniqueWithoutConsultorInput = {
    where: FundWhereUniqueInput
    data: XOR<FundUpdateWithoutConsultorInput, FundUncheckedUpdateWithoutConsultorInput>
  }

  export type FundUpdateManyWithWhereWithoutConsultorInput = {
    where: FundScalarWhereInput
    data: XOR<FundUpdateManyMutationInput, FundUncheckedUpdateManyWithoutConsultorInput>
  }

  export type FundScalarWhereInput = {
    AND?: FundScalarWhereInput | FundScalarWhereInput[]
    OR?: FundScalarWhereInput[]
    NOT?: FundScalarWhereInput | FundScalarWhereInput[]
    id?: StringFilter<"Fund"> | string
    name?: StringFilter<"Fund"> | string
    symbol?: StringFilter<"Fund"> | string
    contractAddress?: StringNullableFilter<"Fund"> | string | null
    tokenContractId?: StringNullableFilter<"Fund"> | string | null
    vaultContractId?: StringNullableFilter<"Fund"> | string | null
    adminSecretKey?: StringNullableFilter<"Fund"> | string | null
    maxSupply?: IntFilter<"Fund"> | number
    totalIssued?: IntFilter<"Fund"> | number
    price?: FloatFilter<"Fund"> | number
    status?: StringFilter<"Fund"> | string
    targetAmount?: FloatNullableFilter<"Fund"> | number | null
    description?: StringNullableFilter<"Fund"> | string | null
    createdAt?: DateTimeFilter<"Fund"> | Date | string
    updatedAt?: DateTimeFilter<"Fund"> | Date | string
    consultorId?: StringNullableFilter<"Fund"> | string | null
  }

  export type UserCreateWithoutCedentesInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutInvestorInput
    sacados?: SacadoCreateNestedManyWithoutConsultorInput
    funds?: FundCreateNestedManyWithoutConsultorInput
  }

  export type UserUncheckedCreateWithoutCedentesInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutInvestorInput
    sacados?: SacadoUncheckedCreateNestedManyWithoutConsultorInput
    funds?: FundUncheckedCreateNestedManyWithoutConsultorInput
  }

  export type UserCreateOrConnectWithoutCedentesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCedentesInput, UserUncheckedCreateWithoutCedentesInput>
  }

  export type UserUpsertWithoutCedentesInput = {
    update: XOR<UserUpdateWithoutCedentesInput, UserUncheckedUpdateWithoutCedentesInput>
    create: XOR<UserCreateWithoutCedentesInput, UserUncheckedCreateWithoutCedentesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCedentesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCedentesInput, UserUncheckedUpdateWithoutCedentesInput>
  }

  export type UserUpdateWithoutCedentesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutInvestorNestedInput
    sacados?: SacadoUpdateManyWithoutConsultorNestedInput
    funds?: FundUpdateManyWithoutConsultorNestedInput
  }

  export type UserUncheckedUpdateWithoutCedentesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutInvestorNestedInput
    sacados?: SacadoUncheckedUpdateManyWithoutConsultorNestedInput
    funds?: FundUncheckedUpdateManyWithoutConsultorNestedInput
  }

  export type UserCreateWithoutSacadosInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteCreateNestedManyWithoutConsultorInput
    funds?: FundCreateNestedManyWithoutConsultorInput
  }

  export type UserUncheckedCreateWithoutSacadosInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteUncheckedCreateNestedManyWithoutConsultorInput
    funds?: FundUncheckedCreateNestedManyWithoutConsultorInput
  }

  export type UserCreateOrConnectWithoutSacadosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSacadosInput, UserUncheckedCreateWithoutSacadosInput>
  }

  export type ReceivableCreateWithoutSacadoInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fund: FundCreateNestedOneWithoutReceivablesInput
  }

  export type ReceivableUncheckedCreateWithoutSacadoInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
  }

  export type ReceivableCreateOrConnectWithoutSacadoInput = {
    where: ReceivableWhereUniqueInput
    create: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput>
  }

  export type ReceivableCreateManySacadoInputEnvelope = {
    data: ReceivableCreateManySacadoInput | ReceivableCreateManySacadoInput[]
  }

  export type UserUpsertWithoutSacadosInput = {
    update: XOR<UserUpdateWithoutSacadosInput, UserUncheckedUpdateWithoutSacadosInput>
    create: XOR<UserCreateWithoutSacadosInput, UserUncheckedCreateWithoutSacadosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSacadosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSacadosInput, UserUncheckedUpdateWithoutSacadosInput>
  }

  export type UserUpdateWithoutSacadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUpdateManyWithoutConsultorNestedInput
    funds?: FundUpdateManyWithoutConsultorNestedInput
  }

  export type UserUncheckedUpdateWithoutSacadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUncheckedUpdateManyWithoutConsultorNestedInput
    funds?: FundUncheckedUpdateManyWithoutConsultorNestedInput
  }

  export type ReceivableUpsertWithWhereUniqueWithoutSacadoInput = {
    where: ReceivableWhereUniqueInput
    update: XOR<ReceivableUpdateWithoutSacadoInput, ReceivableUncheckedUpdateWithoutSacadoInput>
    create: XOR<ReceivableCreateWithoutSacadoInput, ReceivableUncheckedCreateWithoutSacadoInput>
  }

  export type ReceivableUpdateWithWhereUniqueWithoutSacadoInput = {
    where: ReceivableWhereUniqueInput
    data: XOR<ReceivableUpdateWithoutSacadoInput, ReceivableUncheckedUpdateWithoutSacadoInput>
  }

  export type ReceivableUpdateManyWithWhereWithoutSacadoInput = {
    where: ReceivableScalarWhereInput
    data: XOR<ReceivableUpdateManyMutationInput, ReceivableUncheckedUpdateManyWithoutSacadoInput>
  }

  export type ReceivableScalarWhereInput = {
    AND?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
    OR?: ReceivableScalarWhereInput[]
    NOT?: ReceivableScalarWhereInput | ReceivableScalarWhereInput[]
    id?: StringFilter<"Receivable"> | string
    faceValue?: FloatFilter<"Receivable"> | number
    dueDate?: DateTimeFilter<"Receivable"> | Date | string
    status?: StringFilter<"Receivable"> | string
    paidValue?: FloatNullableFilter<"Receivable"> | number | null
    paidAt?: DateTimeNullableFilter<"Receivable"> | Date | string | null
    createdAt?: DateTimeFilter<"Receivable"> | Date | string
    updatedAt?: DateTimeFilter<"Receivable"> | Date | string
    fundId?: StringFilter<"Receivable"> | string
    sacadoId?: StringFilter<"Receivable"> | string
  }

  export type UserCreateWithoutFundsInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteCreateNestedManyWithoutConsultorInput
    sacados?: SacadoCreateNestedManyWithoutConsultorInput
  }

  export type UserUncheckedCreateWithoutFundsInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutInvestorInput
    cedentes?: CedenteUncheckedCreateNestedManyWithoutConsultorInput
    sacados?: SacadoUncheckedCreateNestedManyWithoutConsultorInput
  }

  export type UserCreateOrConnectWithoutFundsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
  }

  export type ReceivableCreateWithoutFundInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sacado: SacadoCreateNestedOneWithoutReceivablesInput
  }

  export type ReceivableUncheckedCreateWithoutFundInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sacadoId: string
  }

  export type ReceivableCreateOrConnectWithoutFundInput = {
    where: ReceivableWhereUniqueInput
    create: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput>
  }

  export type ReceivableCreateManyFundInputEnvelope = {
    data: ReceivableCreateManyFundInput | ReceivableCreateManyFundInput[]
  }

  export type OrderCreateWithoutFundInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investor: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutFundInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId: string
  }

  export type OrderCreateOrConnectWithoutFundInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput>
  }

  export type OrderCreateManyFundInputEnvelope = {
    data: OrderCreateManyFundInput | OrderCreateManyFundInput[]
  }

  export type UserUpsertWithoutFundsInput = {
    update: XOR<UserUpdateWithoutFundsInput, UserUncheckedUpdateWithoutFundsInput>
    create: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFundsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFundsInput, UserUncheckedUpdateWithoutFundsInput>
  }

  export type UserUpdateWithoutFundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUpdateManyWithoutConsultorNestedInput
  }

  export type UserUncheckedUpdateWithoutFundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutInvestorNestedInput
    cedentes?: CedenteUncheckedUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUncheckedUpdateManyWithoutConsultorNestedInput
  }

  export type ReceivableUpsertWithWhereUniqueWithoutFundInput = {
    where: ReceivableWhereUniqueInput
    update: XOR<ReceivableUpdateWithoutFundInput, ReceivableUncheckedUpdateWithoutFundInput>
    create: XOR<ReceivableCreateWithoutFundInput, ReceivableUncheckedCreateWithoutFundInput>
  }

  export type ReceivableUpdateWithWhereUniqueWithoutFundInput = {
    where: ReceivableWhereUniqueInput
    data: XOR<ReceivableUpdateWithoutFundInput, ReceivableUncheckedUpdateWithoutFundInput>
  }

  export type ReceivableUpdateManyWithWhereWithoutFundInput = {
    where: ReceivableScalarWhereInput
    data: XOR<ReceivableUpdateManyMutationInput, ReceivableUncheckedUpdateManyWithoutFundInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutFundInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutFundInput, OrderUncheckedUpdateWithoutFundInput>
    create: XOR<OrderCreateWithoutFundInput, OrderUncheckedCreateWithoutFundInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutFundInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutFundInput, OrderUncheckedUpdateWithoutFundInput>
  }

  export type OrderUpdateManyWithWhereWithoutFundInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutFundInput>
  }

  export type FundCreateWithoutReceivablesInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor?: UserCreateNestedOneWithoutFundsInput
    orders?: OrderCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateWithoutReceivablesInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundCreateOrConnectWithoutReceivablesInput = {
    where: FundWhereUniqueInput
    create: XOR<FundCreateWithoutReceivablesInput, FundUncheckedCreateWithoutReceivablesInput>
  }

  export type SacadoCreateWithoutReceivablesInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor: UserCreateNestedOneWithoutSacadosInput
  }

  export type SacadoUncheckedCreateWithoutReceivablesInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId: string
  }

  export type SacadoCreateOrConnectWithoutReceivablesInput = {
    where: SacadoWhereUniqueInput
    create: XOR<SacadoCreateWithoutReceivablesInput, SacadoUncheckedCreateWithoutReceivablesInput>
  }

  export type FundUpsertWithoutReceivablesInput = {
    update: XOR<FundUpdateWithoutReceivablesInput, FundUncheckedUpdateWithoutReceivablesInput>
    create: XOR<FundCreateWithoutReceivablesInput, FundUncheckedCreateWithoutReceivablesInput>
    where?: FundWhereInput
  }

  export type FundUpdateToOneWithWhereWithoutReceivablesInput = {
    where?: FundWhereInput
    data: XOR<FundUpdateWithoutReceivablesInput, FundUncheckedUpdateWithoutReceivablesInput>
  }

  export type FundUpdateWithoutReceivablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneWithoutFundsNestedInput
    orders?: OrderUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateWithoutReceivablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutFundNestedInput
  }

  export type SacadoUpsertWithoutReceivablesInput = {
    update: XOR<SacadoUpdateWithoutReceivablesInput, SacadoUncheckedUpdateWithoutReceivablesInput>
    create: XOR<SacadoCreateWithoutReceivablesInput, SacadoUncheckedCreateWithoutReceivablesInput>
    where?: SacadoWhereInput
  }

  export type SacadoUpdateToOneWithWhereWithoutReceivablesInput = {
    where?: SacadoWhereInput
    data: XOR<SacadoUpdateWithoutReceivablesInput, SacadoUncheckedUpdateWithoutReceivablesInput>
  }

  export type SacadoUpdateWithoutReceivablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneRequiredWithoutSacadosNestedInput
  }

  export type SacadoUncheckedUpdateWithoutReceivablesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cedentes?: CedenteCreateNestedManyWithoutConsultorInput
    sacados?: SacadoCreateNestedManyWithoutConsultorInput
    funds?: FundCreateNestedManyWithoutConsultorInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email: string
    password: string
    role: string
    status?: string
    publicKey?: string | null
    secretKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cedentes?: CedenteUncheckedCreateNestedManyWithoutConsultorInput
    sacados?: SacadoUncheckedCreateNestedManyWithoutConsultorInput
    funds?: FundUncheckedCreateNestedManyWithoutConsultorInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type FundCreateWithoutOrdersInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultor?: UserCreateNestedOneWithoutFundsInput
    receivables?: ReceivableCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateWithoutOrdersInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorId?: string | null
    receivables?: ReceivableUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundCreateOrConnectWithoutOrdersInput = {
    where: FundWhereUniqueInput
    create: XOR<FundCreateWithoutOrdersInput, FundUncheckedCreateWithoutOrdersInput>
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cedentes?: CedenteUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUpdateManyWithoutConsultorNestedInput
    funds?: FundUpdateManyWithoutConsultorNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    secretKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cedentes?: CedenteUncheckedUpdateManyWithoutConsultorNestedInput
    sacados?: SacadoUncheckedUpdateManyWithoutConsultorNestedInput
    funds?: FundUncheckedUpdateManyWithoutConsultorNestedInput
  }

  export type FundUpsertWithoutOrdersInput = {
    update: XOR<FundUpdateWithoutOrdersInput, FundUncheckedUpdateWithoutOrdersInput>
    create: XOR<FundCreateWithoutOrdersInput, FundUncheckedCreateWithoutOrdersInput>
    where?: FundWhereInput
  }

  export type FundUpdateToOneWithWhereWithoutOrdersInput = {
    where?: FundWhereInput
    data: XOR<FundUpdateWithoutOrdersInput, FundUncheckedUpdateWithoutOrdersInput>
  }

  export type FundUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultor?: UserUpdateOneWithoutFundsNestedInput
    receivables?: ReceivableUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorId?: NullableStringFieldUpdateOperationsInput | string | null
    receivables?: ReceivableUncheckedUpdateManyWithoutFundNestedInput
  }

  export type OrderCreateManyInvestorInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
  }

  export type CedenteCreateManyConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SacadoCreateManyConsultorInput = {
    id?: string
    name: string
    document: string
    address?: string | null
    publicKey?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundCreateManyConsultorInput = {
    id?: string
    name: string
    symbol: string
    contractAddress?: string | null
    tokenContractId?: string | null
    vaultContractId?: string | null
    adminSecretKey?: string | null
    maxSupply: number
    totalIssued?: number
    price?: number
    status?: string
    targetAmount?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateWithoutInvestorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fund?: FundUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutInvestorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyWithoutInvestorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type CedenteUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CedenteUncheckedUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CedenteUncheckedUpdateManyWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SacadoUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivables?: ReceivableUpdateManyWithoutSacadoNestedInput
  }

  export type SacadoUncheckedUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivables?: ReceivableUncheckedUpdateManyWithoutSacadoNestedInput
  }

  export type SacadoUncheckedUpdateManyWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    publicKey?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivables?: ReceivableUpdateManyWithoutFundNestedInput
    orders?: OrderUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivables?: ReceivableUncheckedUpdateManyWithoutFundNestedInput
    orders?: OrderUncheckedUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateManyWithoutConsultorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    contractAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenContractId?: NullableStringFieldUpdateOperationsInput | string | null
    vaultContractId?: NullableStringFieldUpdateOperationsInput | string | null
    adminSecretKey?: NullableStringFieldUpdateOperationsInput | string | null
    maxSupply?: IntFieldUpdateOperationsInput | number
    totalIssued?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    targetAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReceivableCreateManySacadoInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fundId: string
  }

  export type ReceivableUpdateWithoutSacadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fund?: FundUpdateOneRequiredWithoutReceivablesNestedInput
  }

  export type ReceivableUncheckedUpdateWithoutSacadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type ReceivableUncheckedUpdateManyWithoutSacadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundId?: StringFieldUpdateOperationsInput | string
  }

  export type ReceivableCreateManyFundInput = {
    id?: string
    faceValue: number
    dueDate: Date | string
    status?: string
    paidValue?: number | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sacadoId: string
  }

  export type OrderCreateManyFundInput = {
    id?: string
    quantity: number
    price: number
    total: number
    status?: string
    txHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    investorId: string
  }

  export type ReceivableUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sacado?: SacadoUpdateOneRequiredWithoutReceivablesNestedInput
  }

  export type ReceivableUncheckedUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sacadoId?: StringFieldUpdateOperationsInput | string
  }

  export type ReceivableUncheckedUpdateManyWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    faceValue?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    paidValue?: NullableFloatFieldUpdateOperationsInput | number | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sacadoId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investor?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: StringFieldUpdateOperationsInput | string
  }

  export type OrderUncheckedUpdateManyWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investorId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SacadoCountOutputTypeDefaultArgs instead
     */
    export type SacadoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SacadoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FundCountOutputTypeDefaultArgs instead
     */
    export type FundCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FundCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CedenteDefaultArgs instead
     */
    export type CedenteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CedenteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SacadoDefaultArgs instead
     */
    export type SacadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SacadoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FundDefaultArgs instead
     */
    export type FundArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FundDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReceivableDefaultArgs instead
     */
    export type ReceivableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReceivableDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}